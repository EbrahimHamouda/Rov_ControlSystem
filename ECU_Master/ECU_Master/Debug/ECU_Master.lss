
ECU_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000222  00800060  000014e8  0000157c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000043a  00800282  00800282  0000179e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037c2  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001497  00000000  00000000  000052e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023ad  00000000  00000000  0000677d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00008b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011de  00000000  00000000  000092a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019e1  00000000  00000000  0000a486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000be67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_13>
      38:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 0a 	call	0x148e	; 0x148e <main>
      8a:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Buffer_Password>:
		Au_status = _PASSWORD_WRONG;
	}
}

static void Buffer_Password(uint8 key)
{
      92:	cf 93       	push	r28
	if ((key!='#')&&(buffer_index < PASSWORD_LENGTH)) // check user end the password
      94:	83 32       	cpi	r24, 0x23	; 35
      96:	59 f1       	breq	.+86     	; 0xee <Buffer_Password+0x5c>
      98:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <buffer_index>
      9c:	99 30       	cpi	r25, 0x09	; 9
      9e:	38 f5       	brcc	.+78     	; 0xee <Buffer_Password+0x5c>
      a0:	c8 2f       	mov	r28, r24
	{
		if (Change_PasswordSemphore)
		{
			Input_PasswordBuffer[buffer_index] = key;
		}
		lcd_chr(&mylcd,'*');
      a2:	6a e2       	ldi	r22, 0x2A	; 42
      a4:	8d e6       	ldi	r24, 0x6D	; 109
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
		Input_PasswordCs += (buffer_index*key);
      ac:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <buffer_index>
      b0:	2c 9f       	mul	r18, r28
      b2:	c0 01       	movw	r24, r0
      b4:	11 24       	eor	r1, r1
      b6:	09 2e       	mov	r0, r25
      b8:	00 0c       	add	r0, r0
      ba:	aa 0b       	sbc	r26, r26
      bc:	bb 0b       	sbc	r27, r27
      be:	40 91 8b 02 	lds	r20, 0x028B	; 0x80028b <Input_PasswordCs>
      c2:	50 91 8c 02 	lds	r21, 0x028C	; 0x80028c <Input_PasswordCs+0x1>
      c6:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <Input_PasswordCs+0x2>
      ca:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <Input_PasswordCs+0x3>
      ce:	84 0f       	add	r24, r20
      d0:	95 1f       	adc	r25, r21
      d2:	a6 1f       	adc	r26, r22
      d4:	b7 1f       	adc	r27, r23
      d6:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <Input_PasswordCs>
      da:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <Input_PasswordCs+0x1>
      de:	a0 93 8d 02 	sts	0x028D, r26	; 0x80028d <Input_PasswordCs+0x2>
      e2:	b0 93 8e 02 	sts	0x028E, r27	; 0x80028e <Input_PasswordCs+0x3>
		buffer_index++;
      e6:	2f 5f       	subi	r18, 0xFF	; 255
      e8:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <buffer_index>
      ec:	20 c0       	rjmp	.+64     	; 0x12e <Buffer_Password+0x9c>
	}
	else
	{
		if(Change_PasswordSemphore)
      ee:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <Change_PasswordSemphore>
      f2:	88 23       	and	r24, r24
      f4:	a1 f0       	breq	.+40     	; 0x11e <Buffer_Password+0x8c>
		{
			if (confirm_passwordCs==0)
      f6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <confirm_passwordCs>
      fa:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <confirm_passwordCs+0x1>
      fe:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <confirm_passwordCs+0x2>
     102:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <confirm_passwordCs+0x3>
     106:	89 2b       	or	r24, r25
     108:	8a 2b       	or	r24, r26
     10a:	8b 2b       	or	r24, r27
     10c:	21 f4       	brne	.+8      	; 0x116 <Buffer_Password+0x84>
			{
				Au_status=_CONFRIM_PASSWORD;
     10e:	86 e0       	ldi	r24, 0x06	; 6
     110:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
     114:	07 c0       	rjmp	.+14     	; 0x124 <Buffer_Password+0x92>
			}
			else
			{
				Au_status=_CHECK_CHANGE_PASSWORD;
     116:	87 e0       	ldi	r24, 0x07	; 7
     118:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
     11c:	03 c0       	rjmp	.+6      	; 0x124 <Buffer_Password+0x92>
			}
		}
		else
		{
			Au_status=_CHECK_PASSWORD;
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
		}
		Keypad_semphore=0; // don't need any key else from user
     124:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <Keypad_semphore>
		authentication_DispatcherSemphore=1;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <authentication_DispatcherSemphore>
	}
}
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <Give_UserNewTry>:
	Password_Cs |= (uint32)(EEPROM_read(i))<<24;
	return Password_Cs;
}

static void Give_UserNewTry(uint8 temp) // this funcation called when password enterd wrong
{
     132:	cf 93       	push	r28
     134:	c8 2f       	mov	r28, r24
	EEPROM_write(WRONG_TRIALS_LOCATION,temp);
     136:	68 2f       	mov	r22, r24
     138:	80 e1       	ldi	r24, 0x10	; 16
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <EEPROM_write>
	lcd_clear(&mylcd);	// clear lcd
     140:	8d e6       	ldi	r24, 0x6D	; 109
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
	lcd_str(&mylcd,0,0,"password wronge*Number trials:"); // write massage
     148:	23 e8       	ldi	r18, 0x83	; 131
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	8d e6       	ldi	r24, 0x6D	; 109
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
	lcd_chr(&mylcd,(temp|(0x30)));
     158:	6c 2f       	mov	r22, r28
     15a:	60 63       	ori	r22, 0x30	; 48
     15c:	8d e6       	ldi	r24, 0x6D	; 109
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
	lcd_str(&mylcd,2,0,"Enter password*"); // write massage
     164:	22 ea       	ldi	r18, 0xA2	; 162
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	62 e0       	ldi	r22, 0x02	; 2
     16c:	8d e6       	ldi	r24, 0x6D	; 109
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
	buffer_index=0;
     174:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <buffer_index>
	Input_PasswordCs=0;
     178:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <Input_PasswordCs>
     17c:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <Input_PasswordCs+0x1>
     180:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <Input_PasswordCs+0x2>
     184:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <Input_PasswordCs+0x3>
	Keypad_semphore =1; // to start receive password again
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <Keypad_semphore>
	Au_status = _BUFFER_PASSWORD;
     18e:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
}
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <One_SecondFinish>:

static void One_SecondFinish()	// this funcation called from TMU module when second finish
{
	lcd_goto(&mylcd,3,0); // to show seconds in lcd
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	63 e0       	ldi	r22, 0x03	; 3
     19a:	8d e6       	ldi	r24, 0x6D	; 109
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 94 09 	call	0x1328	; 0x1328 <lcd_goto>
	lcd_chr(&mylcd,(0x30|num_S2));
     1a2:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <num_S2>
     1a6:	60 63       	ori	r22, 0x30	; 48
     1a8:	8d e6       	ldi	r24, 0x6D	; 109
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
	lcd_goto(&mylcd,3,1);
     1b0:	41 e0       	ldi	r20, 0x01	; 1
     1b2:	63 e0       	ldi	r22, 0x03	; 3
     1b4:	8d e6       	ldi	r24, 0x6D	; 109
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 94 09 	call	0x1328	; 0x1328 <lcd_goto>
	lcd_chr(&mylcd,(0x30|num_S1));
     1bc:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <num_S1>
     1c0:	60 63       	ori	r22, 0x30	; 48
     1c2:	8d e6       	ldi	r24, 0x6D	; 109
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
	if ((num_S2==6)&&(num_S1==0)) // that mean the minute finished
     1ca:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <num_S2>
     1ce:	86 30       	cpi	r24, 0x06	; 6
     1d0:	a1 f4       	brne	.+40     	; 0x1fa <One_SecondFinish+0x64>
     1d2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <num_S1>
     1d6:	81 11       	cpse	r24, r1
     1d8:	10 c0       	rjmp	.+32     	; 0x1fa <One_SecondFinish+0x64>
	{
		end_event(handler);// to end tmu event and
     1da:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <handler>
     1de:	0e 94 a4 07 	call	0xf48	; 0xf48 <end_event>
		TMU_DeInit(); // to stop ISR from timer
     1e2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TMU_DeInit>
		TMU_semphore=0; // to free the tmu
     1e6:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <TMU_semphore>
		EEPROM_write(WRONG_TRIALS_LOCATION,0); //clear_WrongTrails
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	80 e1       	ldi	r24, 0x10	; 16
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <EEPROM_write>
		Give_UserNewTry(0); // zero because i just cleared the num_trials
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 99 00 	call	0x132	; 0x132 <Give_UserNewTry>
	}
	num_S1++;
     1fa:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <num_S1>
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <num_S1>
	if (num_S1>9)
     204:	8a 30       	cpi	r24, 0x0A	; 10
     206:	38 f0       	brcs	.+14     	; 0x216 <One_SecondFinish+0x80>
	{
		num_S2++;
     208:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <num_S2>
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <num_S2>
		num_S1=0;
     212:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <num_S1>
     216:	08 95       	ret

00000218 <Change_PasswordCs>:
}

void Change_PasswordCs()
{
	uint8 i=PASSWOR_CS_LOCATION;
	EEPROM_write(i++,(uint8)(Input_PasswordCs));
     218:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <Input_PasswordCs>
     21c:	89 e0       	ldi	r24, 0x09	; 9
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <EEPROM_write>
	EEPROM_write(i++,(uint8)(Input_PasswordCs>>8));
     224:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <Input_PasswordCs>
     228:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <Input_PasswordCs+0x1>
     22c:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <Input_PasswordCs+0x2>
     230:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <Input_PasswordCs+0x3>
     234:	69 2f       	mov	r22, r25
     236:	7a 2f       	mov	r23, r26
     238:	8b 2f       	mov	r24, r27
     23a:	99 27       	eor	r25, r25
     23c:	8a e0       	ldi	r24, 0x0A	; 10
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <EEPROM_write>
	EEPROM_write(i++,(uint8)(Input_PasswordCs>>16));
     244:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <Input_PasswordCs>
     248:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <Input_PasswordCs+0x1>
     24c:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <Input_PasswordCs+0x2>
     250:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <Input_PasswordCs+0x3>
     254:	bd 01       	movw	r22, r26
     256:	88 27       	eor	r24, r24
     258:	99 27       	eor	r25, r25
     25a:	8b e0       	ldi	r24, 0x0B	; 11
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <EEPROM_write>
	EEPROM_write(i++,(uint8)(Input_PasswordCs>>24));
     262:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <Input_PasswordCs>
     266:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <Input_PasswordCs+0x1>
     26a:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <Input_PasswordCs+0x2>
     26e:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <Input_PasswordCs+0x3>
     272:	6b 2f       	mov	r22, r27
     274:	77 27       	eor	r23, r23
     276:	88 27       	eor	r24, r24
     278:	99 27       	eor	r25, r25
     27a:	8c e0       	ldi	r24, 0x0C	; 12
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <EEPROM_write>
     282:	08 95       	ret

00000284 <Change_password>:
	}
}

void Change_password()
{
	if (System_logged) // system not logged
     284:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <System_logged>
     288:	88 23       	and	r24, r24
     28a:	e1 f0       	breq	.+56     	; 0x2c4 <Change_password+0x40>
	{
		lcd_clear(&mylcd);
     28c:	8d e6       	ldi	r24, 0x6D	; 109
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
		lcd_str(&mylcd,0,0,"enter New*Password please*");
     294:	22 eb       	ldi	r18, 0xB2	; 178
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	8d e6       	ldi	r24, 0x6D	; 109
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
		Au_status = _BUFFER_PASSWORD;
     2a4:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
		confirm_passwordCs=0;
     2a8:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <confirm_passwordCs>
     2ac:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <confirm_passwordCs+0x1>
     2b0:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <confirm_passwordCs+0x2>
     2b4:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <confirm_passwordCs+0x3>
		Change_PasswordSemphore=1;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <Change_PasswordSemphore>
		authentication_DispatcherSemphore=1;
     2be:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <authentication_DispatcherSemphore>
     2c2:	08 95       	ret
	}
	else
	{
		lcd_clear(&mylcd);
     2c4:	8d e6       	ldi	r24, 0x6D	; 109
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
		lcd_str(&mylcd,0,0,"enter system*first please*");
     2cc:	2d ec       	ldi	r18, 0xCD	; 205
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	8d e6       	ldi	r24, 0x6D	; 109
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	2f e3       	ldi	r18, 0x3F	; 63
     2de:	8d e0       	ldi	r24, 0x0D	; 13
     2e0:	93 e0       	ldi	r25, 0x03	; 3
     2e2:	21 50       	subi	r18, 0x01	; 1
     2e4:	80 40       	sbci	r24, 0x00	; 0
     2e6:	90 40       	sbci	r25, 0x00	; 0
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <Change_password+0x5e>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <Change_password+0x68>
     2ec:	00 00       	nop
		_delay_ms(1000);
		SYSTEM_OPTIONS_flag=1; // to open options one more time
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <SYSTEM_OPTIONS_flag>
     2f4:	08 95       	ret

000002f6 <Authentication_Dispatcher>:
	}
}

void Authentication_Dispatcher()
{
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	28 97       	sbiw	r28, 0x08	; 8
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
	authentication_DispatcherSemphore=0;
     316:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <authentication_DispatcherSemphore>
	switch(Au_status)
     31a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	09 f4       	brne	.+2      	; 0x324 <Authentication_Dispatcher+0x2e>
     322:	56 c0       	rjmp	.+172    	; 0x3d0 <Authentication_Dispatcher+0xda>
     324:	28 f4       	brcc	.+10     	; 0x330 <Authentication_Dispatcher+0x3a>
     326:	88 23       	and	r24, r24
     328:	69 f0       	breq	.+26     	; 0x344 <Authentication_Dispatcher+0x4e>
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	e9 f0       	breq	.+58     	; 0x368 <Authentication_Dispatcher+0x72>
     32e:	13 c1       	rjmp	.+550    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     330:	86 30       	cpi	r24, 0x06	; 6
     332:	09 f4       	brne	.+2      	; 0x336 <Authentication_Dispatcher+0x40>
     334:	a3 c0       	rjmp	.+326    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     336:	87 30       	cpi	r24, 0x07	; 7
     338:	09 f4       	brne	.+2      	; 0x33c <Authentication_Dispatcher+0x46>
     33a:	c4 c0       	rjmp	.+392    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	09 f0       	breq	.+2      	; 0x342 <Authentication_Dispatcher+0x4c>
     340:	0a c1       	rjmp	.+532    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     342:	68 c0       	rjmp	.+208    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		case _BUFFER_PASSWORD:
		{
			Input_PasswordCs=0;buffer_index=0;
     344:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <Input_PasswordCs>
     348:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <Input_PasswordCs+0x1>
     34c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <Input_PasswordCs+0x2>
     350:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <Input_PasswordCs+0x3>
     354:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <buffer_index>
			Change_CallBackfunction(Buffer_Password);
     358:	89 e4       	ldi	r24, 0x49	; 73
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 10 09 	call	0x1220	; 0x1220 <Change_CallBackfunction>
			Keypad_semphore=1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <Keypad_semphore>
			break;
     366:	f7 c0       	rjmp	.+494    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
	}
}

static void Check_Password()
{
	authentication_DispatcherSemphore=1;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <authentication_DispatcherSemphore>

static uint32 Read_PasswordCs()
{
	uint32 Password_Cs=0;
	uint8 i = PASSWOR_CS_LOCATION;
	Password_Cs |= (uint32)EEPROM_read(i++);
     36e:	89 e0       	ldi	r24, 0x09	; 9
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <EEPROM_read>
     376:	18 2f       	mov	r17, r24
	Password_Cs |= (uint32)(EEPROM_read(i++))<<8;
     378:	8a e0       	ldi	r24, 0x0A	; 10
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <EEPROM_read>
     380:	08 2f       	mov	r16, r24
	Password_Cs |= (uint32)(EEPROM_read(i++))<<16;
     382:	8b e0       	ldi	r24, 0x0B	; 11
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <EEPROM_read>
     38a:	c8 2e       	mov	r12, r24
     38c:	d1 2c       	mov	r13, r1
     38e:	e1 2c       	mov	r14, r1
     390:	f1 2c       	mov	r15, r1
     392:	76 01       	movw	r14, r12
     394:	dd 24       	eor	r13, r13
     396:	cc 24       	eor	r12, r12
     398:	d0 2a       	or	r13, r16
     39a:	c1 2a       	or	r12, r17
	Password_Cs |= (uint32)(EEPROM_read(i))<<24;
     39c:	8c e0       	ldi	r24, 0x0C	; 12
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <EEPROM_read>
}

static void Check_Password()
{
	authentication_DispatcherSemphore=1;
	if (Input_PasswordCs==Read_PasswordCs())//to check if the buffer index == to buffer index
     3a4:	f8 2a       	or	r15, r24
     3a6:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <Input_PasswordCs>
     3aa:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <Input_PasswordCs+0x1>
     3ae:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <Input_PasswordCs+0x2>
     3b2:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <Input_PasswordCs+0x3>
     3b6:	8c 15       	cp	r24, r12
     3b8:	9d 05       	cpc	r25, r13
     3ba:	ae 05       	cpc	r26, r14
     3bc:	bf 05       	cpc	r27, r15
     3be:	21 f4       	brne	.+8      	; 0x3c8 <Authentication_Dispatcher+0xd2>
	{
		Au_status = _PASSWORD_RIGHT;
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
     3c6:	c7 c0       	rjmp	.+398    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
	}
	else
	{
		Au_status = _PASSWORD_WRONG;
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
     3ce:	c3 c0       	rjmp	.+390    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
			Check_Password();
			break;
		}
		case _PASSWORD_RIGHT:
		{
			lcd_clear(&mylcd); // clear
     3d0:	8d e6       	ldi	r24, 0x6D	; 109
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
			lcd_str(&mylcd,0,0,"password Right"); // tell user it's password right
     3d8:	28 ee       	ldi	r18, 0xE8	; 232
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	8d e6       	ldi	r24, 0x6D	; 109
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
     3e8:	2f e3       	ldi	r18, 0x3F	; 63
     3ea:	8d e0       	ldi	r24, 0x0D	; 13
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	80 40       	sbci	r24, 0x00	; 0
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <Authentication_Dispatcher+0xf8>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <Authentication_Dispatcher+0x102>
     3f8:	00 00       	nop
			_delay_ms(1000); // to make user see the message
			SYSTEM_OPTIONS_flag = 1;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <SYSTEM_OPTIONS_flag>
			System_logged=1;	// enter logged mode
     400:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <System_logged>
			Keypad_semphore = 0; //free keypad
     404:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <Keypad_semphore>
			EEPROM_write(WRONG_TRIALS_LOCATION,0); // zero the counter of wrong times of password
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	80 e1       	ldi	r24, 0x10	; 16
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <EEPROM_write>
			break;
     412:	a1 c0       	rjmp	.+322    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
}

static uint8 check_WrongTrials()
{
	uint8 temp; // counter , temp to hold the value from eeprom
	temp = EEPROM_read(WRONG_TRIALS_LOCATION); // read the current number of trial
     414:	80 e1       	ldi	r24, 0x10	; 16
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <EEPROM_read>
	if (temp < THREESHOLD_TRIALS)// check numbers of trials wrong_password
     41c:	83 30       	cpi	r24, 0x03	; 3
     41e:	28 f4       	brcc	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		return ++temp;
     420:	8f 5f       	subi	r24, 0xFF	; 255
			break;
		}
		case _PASSWORD_WRONG:
		{
			uint8 temp = check_WrongTrials();
			if(temp)
     422:	19 f0       	breq	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				Give_UserNewTry(temp);
     424:	0e 94 99 00 	call	0x132	; 0x132 <Give_UserNewTry>
     428:	96 c0       	rjmp	.+300    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
			}
			else
			{
				Keypad_semphore = 0; //free keypad
     42a:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <Keypad_semphore>
				lcd_clear(&mylcd);	// clear lcd
     42e:	8d e6       	ldi	r24, 0x6D	; 109
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
				lcd_str(&mylcd,0,0,"you exceeded*limit of Trials*wait a minute"); // write massage
     436:	27 ef       	ldi	r18, 0xF7	; 247
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	8d e6       	ldi	r24, 0x6D	; 109
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
	}
}

static void Set_TimerOneMinute()
{
	Struct_EventConfg_t Authentication_Event ={1000,PEROIDEC,1,One_SecondFinish}; // new_event confg
     446:	88 e0       	ldi	r24, 0x08	; 8
     448:	e3 e7       	ldi	r30, 0x73	; 115
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	de 01       	movw	r26, r28
     44e:	11 96       	adiw	r26, 0x01	; 1
     450:	01 90       	ld	r0, Z+
     452:	0d 92       	st	X+, r0
     454:	8a 95       	dec	r24
     456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	TMU_init(TMR0,_1MS);
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 3b 07 	call	0xe76	; 0xe76 <TMU_init>
	Creat_NewEvent(&Authentication_Event,&handler);
     460:	64 e8       	ldi	r22, 0x84	; 132
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 47 07 	call	0xe8e	; 0xe8e <Creat_NewEvent>
	TMU_semphore=1;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <TMU_semphore>
	num_S1=0;  // set to 00
     472:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <num_S1>
	num_S2=0;
     476:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <num_S2>
     47a:	6d c0       	rjmp	.+218    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
			}
			break;
		}
		case _CONFRIM_PASSWORD:
		{
			confirm_passwordCs = Input_PasswordCs;
     47c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <Input_PasswordCs>
     480:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <Input_PasswordCs+0x1>
     484:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <Input_PasswordCs+0x2>
     488:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <Input_PasswordCs+0x3>
     48c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <confirm_passwordCs>
     490:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <confirm_passwordCs+0x1>
     494:	a0 93 89 02 	sts	0x0289, r26	; 0x800289 <confirm_passwordCs+0x2>
     498:	b0 93 8a 02 	sts	0x028A, r27	; 0x80028a <confirm_passwordCs+0x3>
			Input_PasswordCs=0;
     49c:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <Input_PasswordCs>
     4a0:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <Input_PasswordCs+0x1>
     4a4:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <Input_PasswordCs+0x2>
     4a8:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <Input_PasswordCs+0x3>
			buffer_index=0;
     4ac:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <buffer_index>
			lcd_goto(&mylcd,3,0);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	63 e0       	ldi	r22, 0x03	; 3
     4b4:	8d e6       	ldi	r24, 0x6D	; 109
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 94 09 	call	0x1328	; 0x1328 <lcd_goto>
			Keypad_semphore=1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <Keypad_semphore>
			break;
     4c2:	49 c0       	rjmp	.+146    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
		}
		case _CHECK_CHANGE_PASSWORD:
		{
			SYSTEM_OPTIONS_flag=1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <SYSTEM_OPTIONS_flag>
			Change_PasswordSemphore=0;
     4ca:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <Change_PasswordSemphore>
			if (confirm_passwordCs==Input_PasswordCs)
     4ce:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <confirm_passwordCs>
     4d2:	50 91 88 02 	lds	r21, 0x0288	; 0x800288 <confirm_passwordCs+0x1>
     4d6:	60 91 89 02 	lds	r22, 0x0289	; 0x800289 <confirm_passwordCs+0x2>
     4da:	70 91 8a 02 	lds	r23, 0x028A	; 0x80028a <confirm_passwordCs+0x3>
     4de:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <Input_PasswordCs>
     4e2:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <Input_PasswordCs+0x1>
     4e6:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <Input_PasswordCs+0x2>
     4ea:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <Input_PasswordCs+0x3>
     4ee:	48 17       	cp	r20, r24
     4f0:	59 07       	cpc	r21, r25
     4f2:	6a 07       	cpc	r22, r26
     4f4:	7b 07       	cpc	r23, r27
     4f6:	d1 f4       	brne	.+52     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			{
				System_logged=0;
     4f8:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <System_logged>
				lcd_clear(&mylcd);
     4fc:	8d e6       	ldi	r24, 0x6D	; 109
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
				Change_PasswordCs();
     504:	0e 94 0c 01 	call	0x218	; 0x218 <Change_PasswordCs>
				lcd_str(&mylcd,0,0,"password*change*successfully");
     508:	22 e2       	ldi	r18, 0x22	; 34
     50a:	31 e0       	ldi	r19, 0x01	; 1
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	8d e6       	ldi	r24, 0x6D	; 109
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
     518:	2f e3       	ldi	r18, 0x3F	; 63
     51a:	8d e0       	ldi	r24, 0x0D	; 13
     51c:	93 e0       	ldi	r25, 0x03	; 3
     51e:	21 50       	subi	r18, 0x01	; 1
     520:	80 40       	sbci	r24, 0x00	; 0
     522:	90 40       	sbci	r25, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     526:	00 c0       	rjmp	.+0      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     528:	00 00       	nop
     52a:	15 c0       	rjmp	.+42     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
				_delay_ms(1000);
			}
			else
			{
				lcd_clear(&mylcd);
     52c:	8d e6       	ldi	r24, 0x6D	; 109
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
				lcd_str(&mylcd,0,0,"password*Don't match*please Try*again");
     534:	2f e3       	ldi	r18, 0x3F	; 63
     536:	31 e0       	ldi	r19, 0x01	; 1
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	8d e6       	ldi	r24, 0x6D	; 109
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
     544:	2f e3       	ldi	r18, 0x3F	; 63
     546:	8d e0       	ldi	r24, 0x0D	; 13
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	21 50       	subi	r18, 0x01	; 1
     54c:	80 40       	sbci	r24, 0x00	; 0
     54e:	90 40       	sbci	r25, 0x00	; 0
     550:	e1 f7       	brne	.-8      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     552:	00 c0       	rjmp	.+0      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     554:	00 00       	nop
				_delay_ms(1000);
			}
			break;
		}
	}
}
     556:	28 96       	adiw	r28, 0x08	; 8
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	08 95       	ret

00000574 <System_LogIn>:

void System_LogIn()
{
	if (System_logged!=1) // system not logged
     574:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <System_logged>
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	91 f0       	breq	.+36     	; 0x5a0 <System_LogIn+0x2c>
	{
		lcd_clear(&mylcd);
     57c:	8d e6       	ldi	r24, 0x6D	; 109
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
		lcd_str(&mylcd,0,0,"enter password*press'#'to*end-password*");
     584:	25 e6       	ldi	r18, 0x65	; 101
     586:	31 e0       	ldi	r19, 0x01	; 1
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	8d e6       	ldi	r24, 0x6D	; 109
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
		Au_status = _BUFFER_PASSWORD;
     594:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
		authentication_DispatcherSemphore=1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <authentication_DispatcherSemphore>
     59e:	08 95       	ret
	}
	else
	{
		lcd_clear(&mylcd);
     5a0:	8d e6       	ldi	r24, 0x6D	; 109
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
		lcd_str(&mylcd,0,0,"system is logged");
     5a8:	2d e8       	ldi	r18, 0x8D	; 141
     5aa:	31 e0       	ldi	r19, 0x01	; 1
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	8d e6       	ldi	r24, 0x6D	; 109
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
     5b8:	2f e9       	ldi	r18, 0x9F	; 159
     5ba:	86 e8       	ldi	r24, 0x86	; 134
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	80 40       	sbci	r24, 0x00	; 0
     5c2:	90 40       	sbci	r25, 0x00	; 0
     5c4:	e1 f7       	brne	.-8      	; 0x5be <System_LogIn+0x4a>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <System_LogIn+0x54>
     5c8:	00 00       	nop
		_delay_ms(500);
		SYSTEM_OPTIONS_flag=1; // to open options one more time
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <SYSTEM_OPTIONS_flag>
     5d0:	08 95       	ret

000005d2 <spi_init>:
#include "SPI.h"

#define SPI_IDLE BIT_IS_SET((SPI_BASE+SPISTATUSREG),SPIINTERRUPTFLAG)

void spi_init(Spi_Config* ptr)
{
     5d2:	fc 01       	movw	r30, r24
	ACCESS_REG_8BIT((SPI_BASE+SPICONTROLREG))  =  0;
     5d4:	1d b8       	out	0x0d, r1	; 13
	ACCESS_REG_8BIT((SPI_BASE+SPICONTROLREG)) |=  (ptr->Interrup << SPIINTERRUPTBIT) | (ptr->DataOrder << SPIDATAORDERBIT) | (ptr->ModeSelect << SPIMODESELECTBIT) | (ptr->ClockPolarity << SPICLOCKPOLRITYBIT) | (ptr->ClockPhase << SPICLOCKPHASEBIT) | (ptr->ClockSelect << SPICLOCKSELECTBIT);
     5d6:	2d b1       	in	r18, 0x0d	; 13
     5d8:	90 81       	ld	r25, Z
     5da:	30 e8       	ldi	r19, 0x80	; 128
     5dc:	93 9f       	mul	r25, r19
     5de:	a0 01       	movw	r20, r0
     5e0:	11 24       	eor	r1, r1
     5e2:	85 81       	ldd	r24, Z+5	; 0x05
     5e4:	82 2b       	or	r24, r18
     5e6:	28 2f       	mov	r18, r24
     5e8:	24 2b       	or	r18, r20
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	40 e2       	ldi	r20, 0x20	; 32
     5ee:	94 9f       	mul	r25, r20
     5f0:	c0 01       	movw	r24, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	82 2b       	or	r24, r18
     5f6:	92 81       	ldd	r25, Z+2	; 0x02
     5f8:	40 e1       	ldi	r20, 0x10	; 16
     5fa:	94 9f       	mul	r25, r20
     5fc:	90 01       	movw	r18, r0
     5fe:	11 24       	eor	r1, r1
     600:	28 2b       	or	r18, r24
     602:	83 81       	ldd	r24, Z+3	; 0x03
     604:	88 0f       	add	r24, r24
     606:	88 0f       	add	r24, r24
     608:	88 0f       	add	r24, r24
     60a:	28 2b       	or	r18, r24
     60c:	84 81       	ldd	r24, Z+4	; 0x04
     60e:	88 0f       	add	r24, r24
     610:	88 0f       	add	r24, r24
     612:	28 2b       	or	r18, r24
     614:	2d b9       	out	0x0d, r18	; 13
	ACCESS_REG_8BIT((SPI_BASE+SPICONTROLREG)) |= (1<<SPIENABLEBIT);
     616:	6e 9a       	sbi	0x0d, 6	; 13
     618:	08 95       	ret

0000061a <spi_master_tx>:
}


void spi_master_tx(uint8 data)
{
	WRITE_REG_8BIT((SPI_BASE+SPIDATAREG),data);
     61a:	8f b9       	out	0x0f, r24	; 15
	while (!SPI_IDLE);
     61c:	77 9b       	sbis	0x0e, 7	; 14
     61e:	fe cf       	rjmp	.-4      	; 0x61c <spi_master_tx+0x2>
}
     620:	08 95       	ret

00000622 <SetPinDirection>:
	 //error	
	}
}
void SetPortDirection(PortType port,Port_ValType Val)
{
	WRITE_REG_8BIT((port+GPIODIR),Val); 
     622:	88 30       	cpi	r24, 0x08	; 8
     624:	e8 f4       	brcc	.+58     	; 0x660 <SetPinDirection+0x3e>
     626:	61 11       	cpse	r22, r1
     628:	0e c0       	rjmp	.+28     	; 0x646 <SetPinDirection+0x24>
     62a:	4a b3       	in	r20, 0x1a	; 26
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	b9 01       	movw	r22, r18
     632:	02 c0       	rjmp	.+4      	; 0x638 <SetPinDirection+0x16>
     634:	66 0f       	add	r22, r22
     636:	77 1f       	adc	r23, r23
     638:	8a 95       	dec	r24
     63a:	e2 f7       	brpl	.-8      	; 0x634 <SetPinDirection+0x12>
     63c:	cb 01       	movw	r24, r22
     63e:	80 95       	com	r24
     640:	84 23       	and	r24, r20
     642:	8a bb       	out	0x1a, r24	; 26
     644:	08 95       	ret
     646:	4a b3       	in	r20, 0x1a	; 26
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	b9 01       	movw	r22, r18
     64e:	02 c0       	rjmp	.+4      	; 0x654 <SetPinDirection+0x32>
     650:	66 0f       	add	r22, r22
     652:	77 1f       	adc	r23, r23
     654:	8a 95       	dec	r24
     656:	e2 f7       	brpl	.-8      	; 0x650 <SetPinDirection+0x2e>
     658:	cb 01       	movw	r24, r22
     65a:	84 2b       	or	r24, r20
     65c:	8a bb       	out	0x1a, r24	; 26
     65e:	08 95       	ret
     660:	98 ef       	ldi	r25, 0xF8	; 248
     662:	98 0f       	add	r25, r24
     664:	98 30       	cpi	r25, 0x08	; 8
     666:	e8 f4       	brcc	.+58     	; 0x6a2 <SetPinDirection+0x80>
     668:	61 11       	cpse	r22, r1
     66a:	0e c0       	rjmp	.+28     	; 0x688 <SetPinDirection+0x66>
     66c:	47 b3       	in	r20, 0x17	; 23
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	b9 01       	movw	r22, r18
     674:	02 c0       	rjmp	.+4      	; 0x67a <SetPinDirection+0x58>
     676:	66 0f       	add	r22, r22
     678:	77 1f       	adc	r23, r23
     67a:	9a 95       	dec	r25
     67c:	e2 f7       	brpl	.-8      	; 0x676 <SetPinDirection+0x54>
     67e:	cb 01       	movw	r24, r22
     680:	80 95       	com	r24
     682:	84 23       	and	r24, r20
     684:	87 bb       	out	0x17, r24	; 23
     686:	08 95       	ret
     688:	47 b3       	in	r20, 0x17	; 23
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	b9 01       	movw	r22, r18
     690:	02 c0       	rjmp	.+4      	; 0x696 <SetPinDirection+0x74>
     692:	66 0f       	add	r22, r22
     694:	77 1f       	adc	r23, r23
     696:	9a 95       	dec	r25
     698:	e2 f7       	brpl	.-8      	; 0x692 <SetPinDirection+0x70>
     69a:	cb 01       	movw	r24, r22
     69c:	84 2b       	or	r24, r20
     69e:	87 bb       	out	0x17, r24	; 23
     6a0:	08 95       	ret
     6a2:	90 ef       	ldi	r25, 0xF0	; 240
     6a4:	98 0f       	add	r25, r24
     6a6:	98 30       	cpi	r25, 0x08	; 8
     6a8:	e8 f4       	brcc	.+58     	; 0x6e4 <SetPinDirection+0xc2>
     6aa:	61 11       	cpse	r22, r1
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <SetPinDirection+0xa8>
     6ae:	44 b3       	in	r20, 0x14	; 20
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	b9 01       	movw	r22, r18
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <SetPinDirection+0x9a>
     6b8:	66 0f       	add	r22, r22
     6ba:	77 1f       	adc	r23, r23
     6bc:	9a 95       	dec	r25
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <SetPinDirection+0x96>
     6c0:	cb 01       	movw	r24, r22
     6c2:	80 95       	com	r24
     6c4:	84 23       	and	r24, r20
     6c6:	84 bb       	out	0x14, r24	; 20
     6c8:	08 95       	ret
     6ca:	44 b3       	in	r20, 0x14	; 20
     6cc:	21 e0       	ldi	r18, 0x01	; 1
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	b9 01       	movw	r22, r18
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <SetPinDirection+0xb6>
     6d4:	66 0f       	add	r22, r22
     6d6:	77 1f       	adc	r23, r23
     6d8:	9a 95       	dec	r25
     6da:	e2 f7       	brpl	.-8      	; 0x6d4 <SetPinDirection+0xb2>
     6dc:	cb 01       	movw	r24, r22
     6de:	84 2b       	or	r24, r20
     6e0:	84 bb       	out	0x14, r24	; 20
     6e2:	08 95       	ret
     6e4:	88 51       	subi	r24, 0x18	; 24
     6e6:	88 30       	cpi	r24, 0x08	; 8
     6e8:	e0 f4       	brcc	.+56     	; 0x722 <SetPinDirection+0x100>
     6ea:	61 11       	cpse	r22, r1
     6ec:	0e c0       	rjmp	.+28     	; 0x70a <SetPinDirection+0xe8>
     6ee:	41 b3       	in	r20, 0x11	; 17
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	b9 01       	movw	r22, r18
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <SetPinDirection+0xda>
     6f8:	66 0f       	add	r22, r22
     6fa:	77 1f       	adc	r23, r23
     6fc:	8a 95       	dec	r24
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <SetPinDirection+0xd6>
     700:	cb 01       	movw	r24, r22
     702:	80 95       	com	r24
     704:	84 23       	and	r24, r20
     706:	81 bb       	out	0x11, r24	; 17
     708:	08 95       	ret
     70a:	41 b3       	in	r20, 0x11	; 17
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	b9 01       	movw	r22, r18
     712:	02 c0       	rjmp	.+4      	; 0x718 <SetPinDirection+0xf6>
     714:	66 0f       	add	r22, r22
     716:	77 1f       	adc	r23, r23
     718:	8a 95       	dec	r24
     71a:	e2 f7       	brpl	.-8      	; 0x714 <SetPinDirection+0xf2>
     71c:	cb 01       	movw	r24, r22
     71e:	84 2b       	or	r24, r20
     720:	81 bb       	out	0x11, r24	; 17
     722:	08 95       	ret

00000724 <digitalWrite>:
}
void digitalWrite(Port_PinType Pin,Port_PinLevelType Val)
{
	if(Pin<8)                  //PORTA
     724:	88 30       	cpi	r24, 0x08	; 8
     726:	e8 f4       	brcc	.+58     	; 0x762 <digitalWrite+0x3e>
	{
		if (Val==PORT_PIN_LEVEL_LOW)
     728:	61 11       	cpse	r22, r1
     72a:	0e c0       	rjmp	.+28     	; 0x748 <digitalWrite+0x24>
		{
			CLEAR_BIT((BASE_A+GPIOOUTDATA),(Pin));
     72c:	4b b3       	in	r20, 0x1b	; 27
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	b9 01       	movw	r22, r18
     734:	02 c0       	rjmp	.+4      	; 0x73a <digitalWrite+0x16>
     736:	66 0f       	add	r22, r22
     738:	77 1f       	adc	r23, r23
     73a:	8a 95       	dec	r24
     73c:	e2 f7       	brpl	.-8      	; 0x736 <digitalWrite+0x12>
     73e:	cb 01       	movw	r24, r22
     740:	80 95       	com	r24
     742:	84 23       	and	r24, r20
     744:	8b bb       	out	0x1b, r24	; 27
     746:	08 95       	ret
		}
		else
		{
			SET_BIT((BASE_A+GPIOOUTDATA),(Pin));
     748:	4b b3       	in	r20, 0x1b	; 27
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	b9 01       	movw	r22, r18
     750:	02 c0       	rjmp	.+4      	; 0x756 <digitalWrite+0x32>
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	8a 95       	dec	r24
     758:	e2 f7       	brpl	.-8      	; 0x752 <digitalWrite+0x2e>
     75a:	cb 01       	movw	r24, r22
     75c:	84 2b       	or	r24, r20
     75e:	8b bb       	out	0x1b, r24	; 27
     760:	08 95       	ret
		}
	}
	else if((Pin<16)&&(Pin>=8)) //PORTB
     762:	98 ef       	ldi	r25, 0xF8	; 248
     764:	98 0f       	add	r25, r24
     766:	98 30       	cpi	r25, 0x08	; 8
     768:	e8 f4       	brcc	.+58     	; 0x7a4 <digitalWrite+0x80>
	{
		Pin-=8;
		if (Val==PORT_PIN_LEVEL_LOW)
     76a:	61 11       	cpse	r22, r1
     76c:	0e c0       	rjmp	.+28     	; 0x78a <digitalWrite+0x66>
		{
			CLEAR_BIT((BASE_B+GPIOOUTDATA),(Pin));
     76e:	48 b3       	in	r20, 0x18	; 24
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	b9 01       	movw	r22, r18
     776:	02 c0       	rjmp	.+4      	; 0x77c <digitalWrite+0x58>
     778:	66 0f       	add	r22, r22
     77a:	77 1f       	adc	r23, r23
     77c:	9a 95       	dec	r25
     77e:	e2 f7       	brpl	.-8      	; 0x778 <digitalWrite+0x54>
     780:	cb 01       	movw	r24, r22
     782:	80 95       	com	r24
     784:	84 23       	and	r24, r20
     786:	88 bb       	out	0x18, r24	; 24
     788:	08 95       	ret
		}
		else
		{
			SET_BIT((BASE_B+GPIOOUTDATA),(Pin));
     78a:	48 b3       	in	r20, 0x18	; 24
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	b9 01       	movw	r22, r18
     792:	02 c0       	rjmp	.+4      	; 0x798 <digitalWrite+0x74>
     794:	66 0f       	add	r22, r22
     796:	77 1f       	adc	r23, r23
     798:	9a 95       	dec	r25
     79a:	e2 f7       	brpl	.-8      	; 0x794 <digitalWrite+0x70>
     79c:	cb 01       	movw	r24, r22
     79e:	84 2b       	or	r24, r20
     7a0:	88 bb       	out	0x18, r24	; 24
     7a2:	08 95       	ret
		}
	}
	else if ((Pin<24)&&(Pin>=16)) //PORTC
     7a4:	90 ef       	ldi	r25, 0xF0	; 240
     7a6:	98 0f       	add	r25, r24
     7a8:	98 30       	cpi	r25, 0x08	; 8
     7aa:	e8 f4       	brcc	.+58     	; 0x7e6 <digitalWrite+0xc2>
	{
		Pin-=16;
		if (Val==PORT_PIN_LEVEL_LOW)
     7ac:	61 11       	cpse	r22, r1
     7ae:	0e c0       	rjmp	.+28     	; 0x7cc <digitalWrite+0xa8>
		{
			CLEAR_BIT((BASE_C+GPIOOUTDATA),(Pin));
     7b0:	45 b3       	in	r20, 0x15	; 21
     7b2:	21 e0       	ldi	r18, 0x01	; 1
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	b9 01       	movw	r22, r18
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <digitalWrite+0x9a>
     7ba:	66 0f       	add	r22, r22
     7bc:	77 1f       	adc	r23, r23
     7be:	9a 95       	dec	r25
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <digitalWrite+0x96>
     7c2:	cb 01       	movw	r24, r22
     7c4:	80 95       	com	r24
     7c6:	84 23       	and	r24, r20
     7c8:	85 bb       	out	0x15, r24	; 21
     7ca:	08 95       	ret
		}
		else
		{
			SET_BIT((BASE_C+GPIOOUTDATA),(Pin));
     7cc:	45 b3       	in	r20, 0x15	; 21
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	b9 01       	movw	r22, r18
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <digitalWrite+0xb6>
     7d6:	66 0f       	add	r22, r22
     7d8:	77 1f       	adc	r23, r23
     7da:	9a 95       	dec	r25
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <digitalWrite+0xb2>
     7de:	cb 01       	movw	r24, r22
     7e0:	84 2b       	or	r24, r20
     7e2:	85 bb       	out	0x15, r24	; 21
     7e4:	08 95       	ret
		}
	}
	else if ((Pin<32)&&(Pin>=24)) //PORTD
     7e6:	88 51       	subi	r24, 0x18	; 24
     7e8:	88 30       	cpi	r24, 0x08	; 8
     7ea:	e0 f4       	brcc	.+56     	; 0x824 <digitalWrite+0x100>
	{
		Pin-=24;
		if (Val==PORT_PIN_LEVEL_LOW)
     7ec:	61 11       	cpse	r22, r1
     7ee:	0e c0       	rjmp	.+28     	; 0x80c <digitalWrite+0xe8>
		{
			CLEAR_BIT((BASE_D+GPIOOUTDATA),(Pin));
     7f0:	42 b3       	in	r20, 0x12	; 18
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	b9 01       	movw	r22, r18
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <digitalWrite+0xda>
     7fa:	66 0f       	add	r22, r22
     7fc:	77 1f       	adc	r23, r23
     7fe:	8a 95       	dec	r24
     800:	e2 f7       	brpl	.-8      	; 0x7fa <digitalWrite+0xd6>
     802:	cb 01       	movw	r24, r22
     804:	80 95       	com	r24
     806:	84 23       	and	r24, r20
     808:	82 bb       	out	0x12, r24	; 18
     80a:	08 95       	ret
		}
		else
		{
			SET_BIT((BASE_D+GPIOOUTDATA),(Pin));
     80c:	42 b3       	in	r20, 0x12	; 18
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	b9 01       	movw	r22, r18
     814:	02 c0       	rjmp	.+4      	; 0x81a <digitalWrite+0xf6>
     816:	66 0f       	add	r22, r22
     818:	77 1f       	adc	r23, r23
     81a:	8a 95       	dec	r24
     81c:	e2 f7       	brpl	.-8      	; 0x816 <digitalWrite+0xf2>
     81e:	cb 01       	movw	r24, r22
     820:	84 2b       	or	r24, r20
     822:	82 bb       	out	0x12, r24	; 18
     824:	08 95       	ret

00000826 <digitalRead>:
	}
}
Port_PinLevelType digitalRead(Port_PinType Pin)
{
	Port_PinLevelType ret_val=0;
	if(Pin<8)                     //PORTA
     826:	88 30       	cpi	r24, 0x08	; 8
     828:	58 f4       	brcc	.+22     	; 0x840 <digitalRead+0x1a>
	{
		if (BIT_IS_SET(BASE_A+GPIOINDATA,Pin))
     82a:	29 b3       	in	r18, 0x19	; 25
		{
			ret_val= PORT_PIN_LEVEL_HIGH;
		}
		else
		{
			ret_val = PORT_PIN_LEVEL_LOW;
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	a9 01       	movw	r20, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <digitalRead+0x10>
     832:	55 95       	asr	r21
     834:	47 95       	ror	r20
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <digitalRead+0xc>
     83a:	ca 01       	movw	r24, r20
     83c:	81 70       	andi	r24, 0x01	; 1
     83e:	08 95       	ret
		}
	}
	else if((Pin<16)&&(Pin>=8)) //PORTB
     840:	28 ef       	ldi	r18, 0xF8	; 248
     842:	28 0f       	add	r18, r24
     844:	28 30       	cpi	r18, 0x08	; 8
     846:	48 f4       	brcc	.+18     	; 0x85a <digitalRead+0x34>
	{
		Pin-=8;
		if (BIT_IS_SET(BASE_B+GPIOINDATA,Pin))
     848:	86 b3       	in	r24, 0x16	; 22
		{
			ret_val= PORT_PIN_LEVEL_HIGH;
		}
		else
		{
			ret_val = PORT_PIN_LEVEL_LOW;
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 c0       	rjmp	.+4      	; 0x852 <digitalRead+0x2c>
     84e:	95 95       	asr	r25
     850:	87 95       	ror	r24
     852:	2a 95       	dec	r18
     854:	e2 f7       	brpl	.-8      	; 0x84e <digitalRead+0x28>
     856:	81 70       	andi	r24, 0x01	; 1
     858:	08 95       	ret
		else
		{
			ret_val = PORT_PIN_LEVEL_LOW;
		}
	}
	else if ((Pin<24)&&(Pin>=16)) //PORTC
     85a:	20 ef       	ldi	r18, 0xF0	; 240
     85c:	28 0f       	add	r18, r24
     85e:	28 30       	cpi	r18, 0x08	; 8
     860:	48 f4       	brcc	.+18     	; 0x874 <__stack+0x15>
	{
		Pin-=16;
		if (BIT_IS_SET(BASE_C+GPIOINDATA,Pin))
     862:	83 b3       	in	r24, 0x13	; 19
		{
			ret_val= PORT_PIN_LEVEL_HIGH;
		}
		else
		{
			ret_val = PORT_PIN_LEVEL_LOW;
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	95 95       	asr	r25
     86a:	87 95       	ror	r24
     86c:	2a 95       	dec	r18
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	81 70       	andi	r24, 0x01	; 1
     872:	08 95       	ret
		else
		{
			ret_val = PORT_PIN_LEVEL_LOW;
		}
	}
	else if ((Pin<32)&&(Pin>=24)) //PORTD
     874:	28 ee       	ldi	r18, 0xE8	; 232
     876:	28 0f       	add	r18, r24
     878:	28 30       	cpi	r18, 0x08	; 8
     87a:	50 f4       	brcc	.+20     	; 0x890 <__stack+0x31>
	{
		Pin-=24;
		if (BIT_IS_SET(BASE_D+GPIOINDATA,Pin))
     87c:	90 b3       	in	r25, 0x10	; 16
		{
			ret_val= PORT_PIN_LEVEL_HIGH;
		}
		else
		{
			ret_val = PORT_PIN_LEVEL_LOW;
     87e:	89 2f       	mov	r24, r25
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
     884:	95 95       	asr	r25
     886:	87 95       	ror	r24
     888:	2a 95       	dec	r18
     88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
     88c:	81 70       	andi	r24, 0x01	; 1
     88e:	08 95       	ret
		//error
	}
}
Port_PinLevelType digitalRead(Port_PinType Pin)
{
	Port_PinLevelType ret_val=0;
     890:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	 //error	
	}
	return ret_val;
}
     892:	08 95       	ret

00000894 <BunchPins_Write>:


#include "GPIO.h"

void BunchPins_Write(uint8* arr,uint8 N,enum_PinValue_t type)
{
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
	uint8 i;
	for (i=0;i<N;i++)
     89e:	66 23       	and	r22, r22
     8a0:	81 f0       	breq	.+32     	; 0x8c2 <BunchPins_Write+0x2e>
     8a2:	f4 2e       	mov	r15, r20
     8a4:	ec 01       	movw	r28, r24
     8a6:	61 50       	subi	r22, 0x01	; 1
     8a8:	06 2f       	mov	r16, r22
     8aa:	10 e0       	ldi	r17, 0x00	; 0
     8ac:	0f 5f       	subi	r16, 0xFF	; 255
     8ae:	1f 4f       	sbci	r17, 0xFF	; 255
     8b0:	08 0f       	add	r16, r24
     8b2:	19 1f       	adc	r17, r25
	{
		digitalWrite(arr[i],type);
     8b4:	6f 2d       	mov	r22, r15
     8b6:	89 91       	ld	r24, Y+
     8b8:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
#include "GPIO.h"

void BunchPins_Write(uint8* arr,uint8 N,enum_PinValue_t type)
{
	uint8 i;
	for (i=0;i<N;i++)
     8bc:	c0 17       	cp	r28, r16
     8be:	d1 07       	cpc	r29, r17
     8c0:	c9 f7       	brne	.-14     	; 0x8b4 <BunchPins_Write+0x20>
	{
		digitalWrite(arr[i],type);
	}
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	08 95       	ret

000008ce <gpio_uart_cng>:

void gpio_uart_cng()
{
	SetPinDirection(D0,SET_PIN_IN); // uart RX
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	88 e1       	ldi	r24, 0x18	; 24
     8d2:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	SetPinDirection(D1,SET_PIN_OUT); // uart TX
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	89 e1       	ldi	r24, 0x19	; 25
     8da:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
     8de:	08 95       	ret

000008e0 <gpio_spi_cng_master>:
}

void gpio_spi_cng_master()
{
	SetPinDirection(B4,SET_PIN_OUT);     //SS
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	8c e0       	ldi	r24, 0x0C	; 12
     8e4:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	SetPinDirection(B5,SET_PIN_OUT);     //MOSi
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	8d e0       	ldi	r24, 0x0D	; 13
     8ec:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	SetPinDirection(B6,SET_PIN_IN);		 //MISO
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	8e e0       	ldi	r24, 0x0E	; 14
     8f4:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	SetPinDirection(B7,SET_PIN_OUT);	 //SCK
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	8f e0       	ldi	r24, 0x0F	; 15
     8fc:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
     900:	08 95       	ret

00000902 <__vector_14>:
}

void Uart_TxInterruptEnable(void (*ptr)())
{
	ptr_CallBackfnUartTx=ptr;           // assign ptr to call back fun
	ACCESS_REG_8BIT((UARTCONTROLB+UART_BASE)) |= 1<<UDRIE;                  // enable interrupt when buffer is empty
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
     924:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <ptr_CallBackfnUartTx>
     928:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <ptr_CallBackfnUartTx+0x1>
     92c:	09 95       	icall
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	bf 91       	pop	r27
     934:	af 91       	pop	r26
     936:	9f 91       	pop	r25
     938:	8f 91       	pop	r24
     93a:	7f 91       	pop	r23
     93c:	6f 91       	pop	r22
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <__vector_13>:
     950:	1f 92       	push	r1
     952:	0f 92       	push	r0
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	0f 92       	push	r0
     958:	11 24       	eor	r1, r1
     95a:	2f 93       	push	r18
     95c:	3f 93       	push	r19
     95e:	4f 93       	push	r20
     960:	5f 93       	push	r21
     962:	6f 93       	push	r22
     964:	7f 93       	push	r23
     966:	8f 93       	push	r24
     968:	9f 93       	push	r25
     96a:	af 93       	push	r26
     96c:	bf 93       	push	r27
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	8c b1       	in	r24, 0x0c	; 12
     974:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <ptr_CallBackfnUartRx>
     978:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <ptr_CallBackfnUartRx+0x1>
     97c:	09 95       	icall
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <Uart_init>:
     9a0:	89 e1       	ldi	r24, 0x19	; 25
     9a2:	89 b9       	out	0x09, r24	; 9
     9a4:	8a b1       	in	r24, 0x0a	; 10
     9a6:	88 61       	ori	r24, 0x18	; 24
     9a8:	8a b9       	out	0x0a, r24	; 10
     9aa:	80 b5       	in	r24, 0x20	; 32
     9ac:	86 68       	ori	r24, 0x86	; 134
     9ae:	80 bd       	out	0x20, r24	; 32
     9b0:	08 95       	ret

000009b2 <Uart_RxInterruptEnable>:
}

void  Uart_RxInterruptEnable(void (*ptr)(uint8))
{
	ptr_CallBackfnUartRx = ptr;         // assign ptr to call back fun
     9b2:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <ptr_CallBackfnUartRx+0x1>
     9b6:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <ptr_CallBackfnUartRx>
	ACCESS_REG_8BIT((UARTCONTROLB+UART_BASE)) |= 1<<RXCIE;                  // enable interrupt when data recieved 
     9ba:	57 9a       	sbi	0x0a, 7	; 10
     9bc:	08 95       	ret

000009be <HardWare_CallBack>:
	* check if the buffer lock first
	* set flage the new data received 
	* buffer the received data  
	*/
	
	RX_FlageDataReciving  = 1;					//set flage to make dispatcher look at the new data
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <RX_FlageDataReciving>
	Rx_Buffer[RX_Buffer_Index++] = data;		//store in buffer and increament the index
     9c4:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <RX_Buffer_Index>
     9c8:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <RX_Buffer_Index+0x1>
     9cc:	a9 01       	movw	r20, r18
     9ce:	4f 5f       	subi	r20, 0xFF	; 255
     9d0:	5f 4f       	sbci	r21, 0xFF	; 255
     9d2:	50 93 9a 02 	sts	0x029A, r21	; 0x80029a <RX_Buffer_Index+0x1>
     9d6:	40 93 99 02 	sts	0x0299, r20	; 0x800299 <RX_Buffer_Index>
     9da:	f9 01       	movw	r30, r18
     9dc:	e5 56       	subi	r30, 0x65	; 101
     9de:	fd 4f       	sbci	r31, 0xFD	; 253
     9e0:	80 83       	st	Z, r24
     9e2:	08 95       	ret

000009e4 <RX_CommFree>:
	/*
	* Buffer_index to zero to start new receiving in buffer
	* clear flage to stop dispatcher cheking untill first interrupt
	* Free buffer from locking to start save data
	*/
	RX_Buffer_Index = 0;   
     9e4:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <RX_Buffer_Index+0x1>
     9e8:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <RX_Buffer_Index>
	RX_FlageDataReciving =0; 
     9ec:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <RX_FlageDataReciving>
     9f0:	08 95       	ret

000009f2 <Comm_RxInit>:
	RX_FlageDataReciving  = 1;					//set flage to make dispatcher look at the new data
	Rx_Buffer[RX_Buffer_Index++] = data;		//store in buffer and increament the index
}

void Comm_RxInit(RX_cfg_t* ptr_cfg_str)
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
* free the comm from pervious usage 
* save the confg in static variable 
* switch to the channel selected to set the hardware
*/

	RX_CommFree(); // make sure the buffer ready to start RX_in
     9f8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <RX_CommFree>
	static_RX_cnfg.ptr_user_fun = ptr_cfg_str->ptr_user_fun;	// call user funcation
     9fc:	e4 e9       	ldi	r30, 0x94	; 148
     9fe:	f2 e0       	ldi	r31, 0x02	; 2
     a00:	88 81       	ld	r24, Y
     a02:	99 81       	ldd	r25, Y+1	; 0x01
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
	static_RX_cnfg.channel		= ptr_cfg_str->channel;
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	82 83       	std	Z+2, r24	; 0x02
	static_RX_cnfg.cofm_letter  = ptr_cfg_str->cofm_letter;
     a0c:	9b 81       	ldd	r25, Y+3	; 0x03
     a0e:	93 83       	std	Z+3, r25	; 0x03

	switch(CHANNEL_SLECTE) //init the hardware
     a10:	81 11       	cpse	r24, r1
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <Comm_RxInit+0x2e>
	{
#ifdef _UART0_ 
		case UART0:
		{
			Uart_init();
     a14:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Uart_init>
			Uart_RxInterruptEnable(HardWare_CallBack); 
     a18:	8f ed       	ldi	r24, 0xDF	; 223
     a1a:	94 e0       	ldi	r25, 0x04	; 4
     a1c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <Uart_RxInterruptEnable>
			I2C_AssignCallBackRX(HardWare_CallBack);
			break;
		}
#endif
	}
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <RX_com_dispatch>:
	* To do -> state machine in "idle- recieving hadder - recieving data - reciecing Check sum "
	* do algorthim  of checking hadder 
	* do algorthim of checking check sum 
	* do algorthim of checking the confirmation letter
	*/
	if (RX_FlageDataReciving)			// check the flage 
     a26:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <RX_FlageDataReciving>
     a2a:	88 23       	and	r24, r24
     a2c:	a9 f0       	breq	.+42     	; 0xa58 <RX_com_dispatch+0x32>
	{

		 RX_FlageDataReciving=0;				// clear the flage to stop checking till next byte 
     a2e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <RX_FlageDataReciving>
		 if (Rx_Buffer[RX_Buffer_Index-1] == static_RX_cnfg.cofm_letter)  // check the confirmation letter
     a32:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <RX_Buffer_Index>
     a36:	70 91 9a 02 	lds	r23, 0x029A	; 0x80029a <RX_Buffer_Index+0x1>
     a3a:	fb 01       	movw	r30, r22
     a3c:	e6 56       	subi	r30, 0x66	; 102
     a3e:	fd 4f       	sbci	r31, 0xFD	; 253
     a40:	90 81       	ld	r25, Z
     a42:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <static_RX_cnfg+0x3>
     a46:	98 13       	cpse	r25, r24
     a48:	07 c0       	rjmp	.+14     	; 0xa58 <RX_com_dispatch+0x32>
		 {
			 Rx_Buffer[RX_Buffer_Index-1] = static_RX_cnfg.cofm_letter; // not needed 
			static_RX_cnfg.ptr_user_fun(Rx_Buffer,RX_Buffer_Index);	 // call application funcation to indicate the receiving finished
     a4a:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <static_RX_cnfg>
     a4e:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <static_RX_cnfg+0x1>
     a52:	8b e9       	ldi	r24, 0x9B	; 155
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	09 95       	icall
     a58:	08 95       	ret

00000a5a <new_DataRx>:
static uint8 First_digit,Second_digit;
volatile static uint8 time_Seconds; // 0>>99

static void new_DataRx(uint8 data) // from controller
{
	if(counter) // counter==1 that mean it rx the key"W S D A"
     a5a:	90 91 8a 06 	lds	r25, 0x068A	; 0x80068a <counter>
     a5e:	99 23       	and	r25, r25
     a60:	41 f0       	breq	.+16     	; 0xa72 <new_DataRx+0x18>
	{
		counter=0;
     a62:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <counter>
		data_rx.power_level=data;
     a66:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <data_rx+0x1>
		Remote_ControlSemphore=1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <Remote_ControlSemphore>
     a70:	08 95       	ret
	}
	else
	{
		data_rx.key=data;
     a72:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <data_rx>
		counter++;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <counter>
     a7c:	08 95       	ret

00000a7e <Command_TimerFinish>:
	}
}

static void Command_TimerFinish()
{
	if (Auto_BufferIndex < Auto_BufferSize )
     a7e:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <Auto_BufferIndex>
     a82:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <Auto_BufferSize>
     a86:	89 17       	cp	r24, r25
     a88:	d8 f5       	brcc	.+118    	; 0xb00 <Command_TimerFinish+0x82>
	{ // the form of command i suppose will be [Dirction_8bit,Power_8bit,Time_16bit]
		data_rx.key= ptr_AutoBufferCommands[Auto_BufferIndex++]; // take the first mean dirction and increament
     a8a:	20 91 86 06 	lds	r18, 0x0686	; 0x800686 <ptr_AutoBufferCommands>
     a8e:	30 91 87 06 	lds	r19, 0x0687	; 0x800687 <ptr_AutoBufferCommands+0x1>
     a92:	eb e8       	ldi	r30, 0x8B	; 139
     a94:	f6 e0       	ldi	r31, 0x06	; 6
     a96:	d9 01       	movw	r26, r18
     a98:	a8 0f       	add	r26, r24
     a9a:	b1 1d       	adc	r27, r1
     a9c:	9c 91       	ld	r25, X
     a9e:	90 83       	st	Z, r25
		data_rx.power_level = ptr_AutoBufferCommands[Auto_BufferIndex++]; // the scond should be power and increament
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	98 0f       	add	r25, r24
     aa4:	d9 01       	movw	r26, r18
     aa6:	a9 0f       	add	r26, r25
     aa8:	b1 1d       	adc	r27, r1
     aaa:	9c 91       	ld	r25, X
     aac:	91 83       	std	Z+1, r25	; 0x01
		time_Seconds  = 0;
     aae:	10 92 83 06 	sts	0x0683, r1	; 0x800683 <time_Seconds>
		time_Seconds  = (ptr_AutoBufferCommands[Auto_BufferIndex++]-48)*10; // the second digit
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	98 0f       	add	r25, r24
     ab6:	f9 01       	movw	r30, r18
     ab8:	e9 0f       	add	r30, r25
     aba:	f1 1d       	adc	r31, r1
     abc:	90 81       	ld	r25, Z
     abe:	99 0f       	add	r25, r25
     ac0:	90 56       	subi	r25, 0x60	; 96
     ac2:	49 2f       	mov	r20, r25
     ac4:	44 0f       	add	r20, r20
     ac6:	44 0f       	add	r20, r20
     ac8:	94 0f       	add	r25, r20
     aca:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <time_Seconds>
		time_Seconds += (ptr_AutoBufferCommands[Auto_BufferIndex++]-48); // the first digit
     ace:	94 e0       	ldi	r25, 0x04	; 4
     ad0:	98 0f       	add	r25, r24
     ad2:	90 93 88 06 	sts	0x0688, r25	; 0x800688 <Auto_BufferIndex>
     ad6:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <time_Seconds>
     ada:	8d 5f       	subi	r24, 0xFD	; 253
     adc:	f9 01       	movw	r30, r18
     ade:	e8 0f       	add	r30, r24
     ae0:	f1 1d       	adc	r31, r1
     ae2:	80 81       	ld	r24, Z
     ae4:	89 0f       	add	r24, r25
     ae6:	80 53       	subi	r24, 0x30	; 48
     ae8:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <time_Seconds>
		First_digit=0;
     aec:	10 92 85 06 	sts	0x0685, r1	; 0x800685 <First_digit>
		Second_digit=0;
     af0:	10 92 84 06 	sts	0x0684, r1	; 0x800684 <Second_digit>
		Remote_ControlSemphore=1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <Remote_ControlSemphore>
		TMU_semphore=1;
     afa:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <TMU_semphore>
     afe:	08 95       	ret
	}
	else
	{
		// Commands finished
		end_event(0);
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 a4 07 	call	0xf48	; 0xf48 <end_event>
		TMU_semphore=0;
     b06:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <TMU_semphore>
		lcd_clear(&mylcd);
     b0a:	8d e6       	ldi	r24, 0x6D	; 109
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
		lcd_str(&mylcd,0,0,"Commands Finish");
     b12:	2e e9       	ldi	r18, 0x9E	; 158
     b14:	31 e0       	ldi	r19, 0x01	; 1
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	8d e6       	ldi	r24, 0x6D	; 109
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
     b22:	08 95       	ret

00000b24 <OneSecondFinish>:
	}
}

static void OneSecondFinish()
{
	if ((--time_Seconds)) // decreament the seconds 
     b24:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <time_Seconds>
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <time_Seconds>
     b2e:	88 23       	and	r24, r24
     b30:	91 f0       	breq	.+36     	; 0xb56 <OneSecondFinish+0x32>
	{
		Remote_ControlSemphore=1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <Remote_ControlSemphore>
		First_digit++;
     b38:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <First_digit>
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <First_digit>
		if (First_digit>9)
     b42:	8a 30       	cpi	r24, 0x0A	; 10
     b44:	78 f0       	brcs	.+30     	; 0xb64 <OneSecondFinish+0x40>
		{
			Second_digit++;
     b46:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <Second_digit>
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <Second_digit>
			First_digit=0;
     b50:	10 92 85 06 	sts	0x0685, r1	; 0x800685 <First_digit>
     b54:	08 95       	ret
		}
	}
	else
	{
		Auto_BufferIndex++;
     b56:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <Auto_BufferIndex>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <Auto_BufferIndex>
		Command_TimerFinish();
     b60:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Command_TimerFinish>
     b64:	08 95       	ret

00000b66 <Commands_AutoBufferArrive>:



static void Commands_AutoBufferArrive(uint8* ptr_Data,uint16 Size)
{
	CommRX_DisspatcherSemphore=0; // Close the Disspatcher of work Becuase i received what i need
     b66:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <CommRX_DisspatcherSemphore>
	Remote_ControlSemphore=1; // work the controller motor
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	20 93 b6 06 	sts	0x06B6, r18	; 0x8006b6 <Remote_ControlSemphore>
	Auto_BufferSize=Size-1;
     b70:	61 50       	subi	r22, 0x01	; 1
     b72:	60 93 89 06 	sts	0x0689, r22	; 0x800689 <Auto_BufferSize>
	ptr_AutoBufferCommands=ptr_Data;
     b76:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <ptr_AutoBufferCommands+0x1>
     b7a:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <ptr_AutoBufferCommands>
	Command_TimerFinish();
     b7e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Command_TimerFinish>
	TMU_init(TMR0,_1MS); // set timer to start working
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 3b 07 	call	0xe76	; 0xe76 <TMU_init>
     b8a:	08 95       	ret

00000b8c <get_mode>:

}

static void get_mode(uint8 key)
{
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	2c 97       	sbiw	r28, 0x0c	; 12
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	18 2f       	mov	r17, r24
	Keypad_semphore=0; // to lock keypad
     ba4:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <Keypad_semphore>
	spi_init(&my_spi);
     ba8:	80 e6       	ldi	r24, 0x60	; 96
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <spi_init>
	if (key == '1')
     bb0:	11 33       	cpi	r17, 0x31	; 49
     bb2:	69 f4       	brne	.+26     	; 0xbce <get_mode+0x42>
	{
		Rov_ControlStatus = LIVE_CONTROL;
     bb4:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <Rov_ControlStatus>
		Uart_init();   //channel used for live control it can be configured
     bb8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Uart_init>
		Uart_RxInterruptEnable(new_DataRx);
     bbc:	8d e2       	ldi	r24, 0x2D	; 45
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <Uart_RxInterruptEnable>
		digitalWrite(12,SET_VALUE_LOW);
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	8c e0       	ldi	r24, 0x0C	; 12
     bc8:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
     bcc:	44 c0       	rjmp	.+136    	; 0xc56 <get_mode+0xca>
	}
	else if(key == '2')
     bce:	12 33       	cpi	r17, 0x32	; 50
     bd0:	51 f5       	brne	.+84     	; 0xc26 <get_mode+0x9a>
	{
		lcd_clear(&mylcd);
     bd2:	8d e6       	ldi	r24, 0x6D	; 109
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
		lcd_str(&mylcd,0,0,"Wait Commands");
     bda:	2e ea       	ldi	r18, 0xAE	; 174
     bdc:	31 e0       	ldi	r19, 0x01	; 1
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	8d e6       	ldi	r24, 0x6D	; 109
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
		Rov_ControlStatus = AUTTO_BUFFER_CONTROL;
     bea:	11 e0       	ldi	r17, 0x01	; 1
     bec:	10 93 8d 06 	sts	0x068D, r17	; 0x80068d <Rov_ControlStatus>
		RX_cfg_t Buffer_CommandsConfg={Commands_AutoBufferArrive,UART0,'*'}; // no need for static because it's already saved in static variable in the CommRx.c
     bf0:	83 eb       	ldi	r24, 0xB3	; 179
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	9a 87       	std	Y+10, r25	; 0x0a
     bf6:	89 87       	std	Y+9, r24	; 0x09
     bf8:	1b 86       	std	Y+11, r1	; 0x0b
     bfa:	8a e2       	ldi	r24, 0x2A	; 42
     bfc:	8c 87       	std	Y+12, r24	; 0x0c
		Comm_RxInit(&Buffer_CommandsConfg);
     bfe:	ce 01       	movw	r24, r28
     c00:	09 96       	adiw	r24, 0x09	; 9
     c02:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Comm_RxInit>
		CommRX_DisspatcherSemphore=1;
     c06:	10 93 b5 06 	sts	0x06B5, r17	; 0x8006b5 <CommRX_DisspatcherSemphore>
		Struct_EventConfg_t NewCommand_Event ={1000,PEROIDEC,1,OneSecondFinish}; // new_event confg  after 1 second will call OneSecondFinish
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	eb e7       	ldi	r30, 0x7B	; 123
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	de 01       	movw	r26, r28
     c12:	11 96       	adiw	r26, 0x01	; 1
     c14:	01 90       	ld	r0, Z+
     c16:	0d 92       	st	X+, r0
     c18:	8a 95       	dec	r24
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <get_mode+0x88>
		creat_oneHandlerEvent(&NewCommand_Event);
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 81 07 	call	0xf02	; 0xf02 <creat_oneHandlerEvent>
     c24:	18 c0       	rjmp	.+48     	; 0xc56 <get_mode+0xca>
	}
	else
	{
		lcd_clear(&mylcd);
     c26:	8d e6       	ldi	r24, 0x6D	; 109
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
		lcd_str(&mylcd,0,0,"wrong choice");
     c2e:	2c eb       	ldi	r18, 0xBC	; 188
     c30:	31 e0       	ldi	r19, 0x01	; 1
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	8d e6       	ldi	r24, 0x6D	; 109
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
     c3e:	2f ed       	ldi	r18, 0xDF	; 223
     c40:	82 e2       	ldi	r24, 0x22	; 34
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <get_mode+0xb8>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <get_mode+0xc2>
     c4e:	00 00       	nop
		_delay_ms(700);
		SYSTEM_OPTIONS_flag=1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <SYSTEM_OPTIONS_flag>
	}
}
     c56:	2c 96       	adiw	r28, 0x0c	; 12
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	08 95       	ret

00000c6a <Remot_controlMode>:

void Remot_controlMode()
{
	lcd_clear(&mylcd);
     c6a:	8d e6       	ldi	r24, 0x6D	; 109
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
	if (System_logged)
     c72:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <System_logged>
     c76:	88 23       	and	r24, r24
     c78:	91 f0       	breq	.+36     	; 0xc9e <Remot_controlMode+0x34>
	{
		lcd_str(&mylcd,0,0,"enter mode*1-live control*2-auto buffer*");
     c7a:	29 ec       	ldi	r18, 0xC9	; 201
     c7c:	31 e0       	ldi	r19, 0x01	; 1
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	8d e6       	ldi	r24, 0x6D	; 109
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
		kpad_init(&mykeypad,get_mode);
     c8a:	66 ec       	ldi	r22, 0xC6	; 198
     c8c:	75 e0       	ldi	r23, 0x05	; 5
     c8e:	86 e6       	ldi	r24, 0x66	; 102
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 f5 07 	call	0xfea	; 0xfea <kpad_init>
		Keypad_semphore=1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <Keypad_semphore>
     c9c:	08 95       	ret
	}
	else
	{
		lcd_str(&mylcd,0,0,"enter system*first please*");
     c9e:	2d ec       	ldi	r18, 0xCD	; 205
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	8d e6       	ldi	r24, 0x6D	; 109
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
     cae:	08 95       	ret

00000cb0 <Remot_controlDisspatcher>:
	}
}

void Remot_controlDisspatcher()
{
	Remote_ControlSemphore=0;
     cb0:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <Remote_ControlSemphore>
	lcd_clear(&mylcd);
     cb4:	8d e6       	ldi	r24, 0x6D	; 109
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
	switch (data_rx.key)
     cbc:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <data_rx>
     cc0:	84 36       	cpi	r24, 0x64	; 100
     cc2:	49 f1       	breq	.+82     	; 0xd16 <Remot_controlDisspatcher+0x66>
     cc4:	18 f4       	brcc	.+6      	; 0xccc <Remot_controlDisspatcher+0x1c>
     cc6:	81 36       	cpi	r24, 0x61	; 97
     cc8:	b1 f1       	breq	.+108    	; 0xd36 <Remot_controlDisspatcher+0x86>
     cca:	45 c0       	rjmp	.+138    	; 0xd56 <Remot_controlDisspatcher+0xa6>
     ccc:	83 37       	cpi	r24, 0x73	; 115
     cce:	99 f0       	breq	.+38     	; 0xcf6 <Remot_controlDisspatcher+0x46>
     cd0:	87 37       	cpi	r24, 0x77	; 119
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <Remot_controlDisspatcher+0x26>
     cd4:	40 c0       	rjmp	.+128    	; 0xd56 <Remot_controlDisspatcher+0xa6>
	{
		case 'w':// forward
		{
			lcd_str(&mylcd,0,0,"Rov Go forward*");
     cd6:	22 ef       	ldi	r18, 0xF2	; 242
     cd8:	31 e0       	ldi	r19, 0x01	; 1
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	8d e6       	ldi	r24, 0x6D	; 109
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
			spi_master_tx('w');
     ce6:	87 e7       	ldi	r24, 0x77	; 119
     ce8:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			/*_delay_ms(1);*/
			spi_master_tx(data_rx.power_level);
     cec:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <data_rx+0x1>
     cf0:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			break;
     cf4:	3e c0       	rjmp	.+124    	; 0xd72 <Remot_controlDisspatcher+0xc2>
		}
		case 's'://backward
		{
			lcd_str(&mylcd,0,0,"Rov Go backword*");
     cf6:	22 e0       	ldi	r18, 0x02	; 2
     cf8:	32 e0       	ldi	r19, 0x02	; 2
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	8d e6       	ldi	r24, 0x6D	; 109
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
			spi_master_tx('s');
     d06:	83 e7       	ldi	r24, 0x73	; 115
     d08:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			/*_delay_ms(1);*/
			spi_master_tx(data_rx.power_level);
     d0c:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <data_rx+0x1>
     d10:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			break;
     d14:	2e c0       	rjmp	.+92     	; 0xd72 <Remot_controlDisspatcher+0xc2>
		}
		case 'd'://right
		{
			lcd_str(&mylcd,0,0,"Rov Go right*");
     d16:	23 e1       	ldi	r18, 0x13	; 19
     d18:	32 e0       	ldi	r19, 0x02	; 2
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	8d e6       	ldi	r24, 0x6D	; 109
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
			spi_master_tx('d');
     d26:	84 e6       	ldi	r24, 0x64	; 100
     d28:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			/*_delay_ms(1);*/
			spi_master_tx(data_rx.power_level);
     d2c:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <data_rx+0x1>
     d30:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			break;
     d34:	1e c0       	rjmp	.+60     	; 0xd72 <Remot_controlDisspatcher+0xc2>
		}
		case 'a'://left
		{
			lcd_str(&mylcd,0,0,"Rov Go left*");
     d36:	21 e2       	ldi	r18, 0x21	; 33
     d38:	32 e0       	ldi	r19, 0x02	; 2
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	8d e6       	ldi	r24, 0x6D	; 109
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
			spi_master_tx('a');
     d46:	81 e6       	ldi	r24, 0x61	; 97
     d48:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			/*_delay_ms(1);*/
			spi_master_tx(data_rx.power_level);
     d4c:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <data_rx+0x1>
     d50:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			break;
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <Remot_controlDisspatcher+0xc2>
		}
		default:
		{
			spi_master_tx(0);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			spi_master_tx(0);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0e 94 0d 03 	call	0x61a	; 0x61a <spi_master_tx>
			lcd_str(&mylcd,0,0,"Rov stable*");
     d62:	2e e2       	ldi	r18, 0x2E	; 46
     d64:	32 e0       	ldi	r19, 0x02	; 2
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	8d e6       	ldi	r24, 0x6D	; 109
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
		}
	}
	lcd_str(&mylcd,1,0,"Power:");
     d72:	2a e3       	ldi	r18, 0x3A	; 58
     d74:	32 e0       	ldi	r19, 0x02	; 2
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	8d e6       	ldi	r24, 0x6D	; 109
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
	lcd_chr(&mylcd,data_rx.power_level);
     d82:	60 91 8c 06 	lds	r22, 0x068C	; 0x80068c <data_rx+0x1>
     d86:	8d e6       	ldi	r24, 0x6D	; 109
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
	if (Rov_ControlStatus==AUTTO_BUFFER_CONTROL)
     d8e:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <Rov_ControlStatus>
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	b1 f4       	brne	.+44     	; 0xdc2 <Remot_controlDisspatcher+0x112>
	{
		lcd_str(&mylcd,2,0,"Time:");
     d96:	21 e4       	ldi	r18, 0x41	; 65
     d98:	32 e0       	ldi	r19, 0x02	; 2
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	8d e6       	ldi	r24, 0x6D	; 109
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
		lcd_chr(&mylcd,Second_digit+48);
     da6:	60 91 84 06 	lds	r22, 0x0684	; 0x800684 <Second_digit>
     daa:	60 5d       	subi	r22, 0xD0	; 208
     dac:	8d e6       	ldi	r24, 0x6D	; 109
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
		lcd_chr(&mylcd,First_digit+48);
     db4:	60 91 85 06 	lds	r22, 0x0685	; 0x800685 <First_digit>
     db8:	60 5d       	subi	r22, 0xD0	; 208
     dba:	8d e6       	ldi	r24, 0x6D	; 109
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
     dc2:	08 95       	ret

00000dc4 <EEPROM_read>:


unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     dc4:	e1 99       	sbic	0x1c, 1	; 28
     dc6:	fe cf       	rjmp	.-4      	; 0xdc4 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     dc8:	9f bb       	out	0x1f, r25	; 31
     dca:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     dcc:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     dce:	8d b3       	in	r24, 0x1d	; 29
}
     dd0:	08 95       	ret

00000dd2 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
     dd2:	e1 99       	sbic	0x1c, 1	; 28
     dd4:	fe cf       	rjmp	.-4      	; 0xdd2 <EEPROM_write>
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
     dd6:	9f bb       	out	0x1f, r25	; 31
     dd8:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     dda:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     ddc:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     dde:	e1 9a       	sbi	0x1c, 1	; 28
     de0:	08 95       	ret

00000de2 <__vector_11>:
static Struct_EventConfg_t Event_ConfgBuffer[MAX_EVENTS] ;
static uint32 Event_Remainder[MAX_EVENTS];
static uint8 S_handler=0;

ISR(TIMER0_OVF_vect)
{
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	1f 92       	push	r1
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 i;
	
	for(i=0;i<MAX_EVENTS;i++)
     e02:	19 82       	std	Y+1, r1	; 0x01
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	30 f5       	brcc	.+76     	; 0xe56 <__vector_11+0x74>
	{
		if (Event_ConfgBuffer[i].Event_Stutes)
     e0a:	e9 81       	ldd	r30, Y+1	; 0x01
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	e5 56       	subi	r30, 0x65	; 101
     e1c:	f9 4f       	sbci	r31, 0xF9	; 249
     e1e:	85 81       	ldd	r24, Z+5	; 0x05
     e20:	88 23       	and	r24, r24
     e22:	99 f0       	breq	.+38     	; 0xe4a <__vector_11+0x68>
		{
			(Event_Remainder[i])--;
     e24:	e9 81       	ldd	r30, Y+1	; 0x01
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	e1 57       	subi	r30, 0x71	; 113
     e32:	f9 4f       	sbci	r31, 0xF9	; 249
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	a2 81       	ldd	r26, Z+2	; 0x02
     e3a:	b3 81       	ldd	r27, Z+3	; 0x03
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	a1 09       	sbc	r26, r1
     e40:	b1 09       	sbc	r27, r1
     e42:	80 83       	st	Z, r24
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	a2 83       	std	Z+2, r26	; 0x02
     e48:	b3 83       	std	Z+3, r27	; 0x03

ISR(TIMER0_OVF_vect)
{
	volatile uint8 i;
	
	for(i=0;i<MAX_EVENTS;i++)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	83 30       	cpi	r24, 0x03	; 3
     e54:	d0 f2       	brcs	.-76     	; 0xe0a <__vector_11+0x28>
		if (Event_ConfgBuffer[i].Event_Stutes)
		{
			(Event_Remainder[i])--;
		}
	}
	TCNT0=249;
     e56:	89 ef       	ldi	r24, 0xF9	; 249
     e58:	82 bf       	out	0x32, r24	; 50
}
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti

00000e76 <TMU_init>:

void TMU_init(Enum_TimrNum_t timr_x ,Enum_EventResloution_t resolution)
{
	// i will work with only this confg
	// to do switch for timer and resolution
	TIMSK |= 1<<0;	//enable interrupt for timer
     e76:	89 b7       	in	r24, 0x39	; 57
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= 3<<0;	// TCCR0 for edjust the resolution
     e7c:	83 b7       	in	r24, 0x33	; 51
     e7e:	83 60       	ori	r24, 0x03	; 3
     e80:	83 bf       	out	0x33, r24	; 51
	TCNT0 =249;
     e82:	89 ef       	ldi	r24, 0xF9	; 249
     e84:	82 bf       	out	0x32, r24	; 50
	S_handler=1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <S_handler>
     e8c:	08 95       	ret

00000e8e <Creat_NewEvent>:
}

void Creat_NewEvent(Struct_EventConfg_t* P_Event,uint8* P_Userhandler) // ptr _confg of TMU to store confg
{
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	8b 01       	movw	r16, r22
	Event_ConfgBuffer[S_handler].peroid				   = P_Event->peroid;
     e9a:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <S_handler>
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	48 81       	ld	r20, Y
     ea4:	59 81       	ldd	r21, Y+1	; 0x01
     ea6:	6a 81       	ldd	r22, Y+2	; 0x02
     ea8:	7b 81       	ldd	r23, Y+3	; 0x03
     eaa:	f9 01       	movw	r30, r18
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	e5 56       	subi	r30, 0x65	; 101
     eba:	f9 4f       	sbci	r31, 0xF9	; 249
     ebc:	40 83       	st	Z, r20
     ebe:	51 83       	std	Z+1, r21	; 0x01
     ec0:	62 83       	std	Z+2, r22	; 0x02
     ec2:	73 83       	std	Z+3, r23	; 0x03
	Event_ConfgBuffer[S_handler].Event_Stutes		   = P_Event->Event_Stutes;										    // to store period to be reloaded into event_remainder
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	95 83       	std	Z+5, r25	; 0x05
	Event_Remainder[S_handler]						   = P_Event->peroid;											// initalize remainder with period
     ec8:	22 0f       	add	r18, r18
     eca:	33 1f       	adc	r19, r19
     ecc:	22 0f       	add	r18, r18
     ece:	33 1f       	adc	r19, r19
     ed0:	d9 01       	movw	r26, r18
     ed2:	a1 57       	subi	r26, 0x71	; 113
     ed4:	b9 4f       	sbci	r27, 0xF9	; 249
     ed6:	4d 93       	st	X+, r20
     ed8:	5d 93       	st	X+, r21
     eda:	6d 93       	st	X+, r22
     edc:	7c 93       	st	X, r23
     ede:	13 97       	sbiw	r26, 0x03	; 3
	Event_ConfgBuffer[S_handler].event_type            = P_Event->event_type;						    // store event type
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	94 83       	std	Z+4, r25	; 0x04
	Event_ConfgBuffer[S_handler].Event_TriggerFunction =P_Event->Event_TriggerFunction;   	//store call back fun to trigger user_event
     ee4:	2e 81       	ldd	r18, Y+6	; 0x06
     ee6:	3f 81       	ldd	r19, Y+7	; 0x07
     ee8:	37 83       	std	Z+7, r19	; 0x07
     eea:	26 83       	std	Z+6, r18	; 0x06
	*P_Userhandler = S_handler++;															// increament handler and change user handler with pervious value
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	98 0f       	add	r25, r24
     ef0:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <S_handler>
     ef4:	f8 01       	movw	r30, r16
     ef6:	80 83       	st	Z, r24
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	08 95       	ret

00000f02 <creat_oneHandlerEvent>:

void creat_oneHandlerEvent(Struct_EventConfg_t* P_Event)
{
     f02:	dc 01       	movw	r26, r24
	Event_ConfgBuffer[0].peroid				   = P_Event->peroid;
     f04:	4d 91       	ld	r20, X+
     f06:	5d 91       	ld	r21, X+
     f08:	6d 91       	ld	r22, X+
     f0a:	7c 91       	ld	r23, X
     f0c:	13 97       	sbiw	r26, 0x03	; 3
     f0e:	eb e9       	ldi	r30, 0x9B	; 155
     f10:	f6 e0       	ldi	r31, 0x06	; 6
     f12:	40 83       	st	Z, r20
     f14:	51 83       	std	Z+1, r21	; 0x01
     f16:	62 83       	std	Z+2, r22	; 0x02
     f18:	73 83       	std	Z+3, r23	; 0x03
	Event_ConfgBuffer[0].Event_Stutes		   = P_Event->Event_Stutes;			    // to store period to be reloaded into event_remainder
     f1a:	15 96       	adiw	r26, 0x05	; 5
     f1c:	8c 91       	ld	r24, X
     f1e:	15 97       	sbiw	r26, 0x05	; 5
     f20:	85 83       	std	Z+5, r24	; 0x05
	Event_Remainder[0]						   = P_Event->peroid;				    // initalize remainder with period
     f22:	40 93 8f 06 	sts	0x068F, r20	; 0x80068f <Event_Remainder>
     f26:	50 93 90 06 	sts	0x0690, r21	; 0x800690 <Event_Remainder+0x1>
     f2a:	60 93 91 06 	sts	0x0691, r22	; 0x800691 <Event_Remainder+0x2>
     f2e:	70 93 92 06 	sts	0x0692, r23	; 0x800692 <Event_Remainder+0x3>
	Event_ConfgBuffer[0].event_type            = P_Event->event_type;				// store event type
     f32:	14 96       	adiw	r26, 0x04	; 4
     f34:	8c 91       	ld	r24, X
     f36:	14 97       	sbiw	r26, 0x04	; 4
     f38:	84 83       	std	Z+4, r24	; 0x04
	Event_ConfgBuffer[0].Event_TriggerFunction =P_Event->Event_TriggerFunction;   	//store call back fun to trigger user_event
     f3a:	16 96       	adiw	r26, 0x06	; 6
     f3c:	8d 91       	ld	r24, X+
     f3e:	9c 91       	ld	r25, X
     f40:	17 97       	sbiw	r26, 0x07	; 7
     f42:	97 83       	std	Z+7, r25	; 0x07
     f44:	86 83       	std	Z+6, r24	; 0x06
     f46:	08 95       	ret

00000f48 <end_event>:
}
void end_event(uint8 handler)
{
	Event_ConfgBuffer[handler].Event_Stutes = 0 ;
     f48:	28 e0       	ldi	r18, 0x08	; 8
     f4a:	82 9f       	mul	r24, r18
     f4c:	c0 01       	movw	r24, r0
     f4e:	11 24       	eor	r1, r1
     f50:	fc 01       	movw	r30, r24
     f52:	e5 56       	subi	r30, 0x65	; 101
     f54:	f9 4f       	sbci	r31, 0xF9	; 249
     f56:	15 82       	std	Z+5, r1	; 0x05
     f58:	08 95       	ret

00000f5a <TMU_DeInit>:
}

void TMU_DeInit()
{
	TIMSK &= ~(1<<0);	//disable interrupt for timer
     f5a:	89 b7       	in	r24, 0x39	; 57
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	89 bf       	out	0x39, r24	; 57
     f60:	08 95       	ret

00000f62 <TMU_Dispatcher>:
}

void TMU_Dispatcher()
{
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cb e9       	ldi	r28, 0x9B	; 155
     f78:	d6 e0       	ldi	r29, 0x06	; 6
     f7a:	0f e8       	ldi	r16, 0x8F	; 143
     f7c:	16 e0       	ldi	r17, 0x06	; 6
     f7e:	0f 2e       	mov	r0, r31
     f80:	f3 eb       	ldi	r31, 0xB3	; 179
     f82:	ef 2e       	mov	r14, r31
     f84:	f6 e0       	ldi	r31, 0x06	; 6
     f86:	ff 2e       	mov	r15, r31
     f88:	f0 2d       	mov	r31, r0
     f8a:	6e 01       	movw	r12, r28
	uint8 i;
	for(i=0;i<MAX_EVENTS;i++) // loop for to check events time
	{
		if (Event_ConfgBuffer[i].Event_Stutes == 1) // check if event working or ended
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	d9 f4       	brne	.+54     	; 0xfc8 <TMU_Dispatcher+0x66>
     f92:	58 01       	movw	r10, r16
		{
			if (Event_Remainder[i]== 0) // check the remainder if reach zero
     f94:	f8 01       	movw	r30, r16
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	a2 81       	ldd	r26, Z+2	; 0x02
     f9c:	b3 81       	ldd	r27, Z+3	; 0x03
     f9e:	89 2b       	or	r24, r25
     fa0:	8a 2b       	or	r24, r26
     fa2:	8b 2b       	or	r24, r27
     fa4:	89 f4       	brne	.+34     	; 0xfc8 <TMU_Dispatcher+0x66>
			{
				(Event_ConfgBuffer[i].Event_TriggerFunction)();
     fa6:	ee 81       	ldd	r30, Y+6	; 0x06
     fa8:	ff 81       	ldd	r31, Y+7	; 0x07
     faa:	09 95       	icall
				if (Event_ConfgBuffer[i].event_type ==ONE_SHOOT)
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	81 11       	cpse	r24, r1
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <TMU_Dispatcher+0x52>
	Event_ConfgBuffer[0].event_type            = P_Event->event_type;				// store event type
	Event_ConfgBuffer[0].Event_TriggerFunction =P_Event->Event_TriggerFunction;   	//store call back fun to trigger user_event
}
void end_event(uint8 handler)
{
	Event_ConfgBuffer[handler].Event_Stutes = 0 ;
     fb2:	1d 82       	std	Y+5, r1	; 0x05
				(Event_ConfgBuffer[i].Event_TriggerFunction)();
				if (Event_ConfgBuffer[i].event_type ==ONE_SHOOT)
				{
					end_event(i);
				}
				Event_Remainder[i] = Event_ConfgBuffer[i].peroid; // reload the period in remainder again
     fb4:	f6 01       	movw	r30, r12
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	a2 81       	ldd	r26, Z+2	; 0x02
     fbc:	b3 81       	ldd	r27, Z+3	; 0x03
     fbe:	f5 01       	movw	r30, r10
     fc0:	80 83       	st	Z, r24
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	a2 83       	std	Z+2, r26	; 0x02
     fc6:	b3 83       	std	Z+3, r27	; 0x03
     fc8:	28 96       	adiw	r28, 0x08	; 8
     fca:	0c 5f       	subi	r16, 0xFC	; 252
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
}

void TMU_Dispatcher()
{
	uint8 i;
	for(i=0;i<MAX_EVENTS;i++) // loop for to check events time
     fce:	ce 15       	cp	r28, r14
     fd0:	df 05       	cpc	r29, r15
     fd2:	d9 f6       	brne	.-74     	; 0xf8a <TMU_Dispatcher+0x28>
				}
				Event_Remainder[i] = Event_ConfgBuffer[i].peroid; // reload the period in remainder again
			}
		}
	}
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	08 95       	ret

00000fea <kpad_init>:
#include "key_pad.h"

static void (*ptr_CallBackFun)(uint8);  // for save the call back fun to call it in dispatcher 

void kpad_init(KeyPad_PinCnfg_t* ptr,void (*ptr_Fu)(uint8))
{
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	7b 01       	movw	r14, r22
     ff8:	ec 01       	movw	r28, r24
     ffa:	8c 01       	movw	r16, r24
     ffc:	0c 5f       	subi	r16, 0xFC	; 252
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
	* assign call back funcation 
	*/
	uint8 i;
	for (i=0;i<4;i++)
	{
		SetPinDirection(ptr->arr_KeyPadInputPins[i],SET_PIN_IN);
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	89 91       	ld	r24, Y+
    1004:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
		SetPinDirection(ptr->arr_KeyPadOutputPins[i],SET_PIN_OUT);
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	* make the rows IN put
	* make the coloums OUT PUT
	* assign call back funcation 
	*/
	uint8 i;
	for (i=0;i<4;i++)
    1010:	c0 17       	cp	r28, r16
    1012:	d1 07       	cpc	r29, r17
    1014:	a9 f7       	brne	.-22     	; 0x1000 <kpad_init+0x16>
	{
		SetPinDirection(ptr->arr_KeyPadInputPins[i],SET_PIN_IN);
		SetPinDirection(ptr->arr_KeyPadOutputPins[i],SET_PIN_OUT);
	}
	ptr_CallBackFun = ptr_Fu;
    1016:	f0 92 b4 06 	sts	0x06B4, r15	; 0x8006b4 <ptr_CallBackFun+0x1>
    101a:	e0 92 b3 06 	sts	0x06B3, r14	; 0x8006b3 <ptr_CallBackFun>
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	08 95       	ret

0000102c <keyPad_dispatcher>:
	}
	return key_ret_val;
}

void keyPad_dispatcher(KeyPad_PinCnfg_t* ptr)
{
    102c:	2f 92       	push	r2
    102e:	3f 92       	push	r3
    1030:	4f 92       	push	r4
    1032:	5f 92       	push	r5
    1034:	6f 92       	push	r6
    1036:	7f 92       	push	r7
    1038:	8f 92       	push	r8
    103a:	9f 92       	push	r9
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	00 d0       	rcall	.+0      	; 0x1052 <keyPad_dispatcher+0x26>
    1052:	1f 92       	push	r1
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	5c 01       	movw	r10, r24
	volatile uint8 i;
	BunchPins_Write(ptr->arr_KeyPadOutputPins,COLUMS,SET_VALUE_LOW); // clear output pins
    105a:	04 96       	adiw	r24, 0x04	; 4
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	63 e0       	ldi	r22, 0x03	; 3
    1064:	0e 94 4a 04 	call	0x894	; 0x894 <BunchPins_Write>
	BunchPins_Write(ptr->arr_KeyPadInputPins,ROWS,SET_VALUE_HIGH); // set intput pins 
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	c5 01       	movw	r24, r10
    106e:	0e 94 4a 04 	call	0x894	; 0x894 <BunchPins_Write>
	for(i=0;i<ROWS;i++)
    1072:	19 82       	std	Y+1, r1	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	08 f0       	brcs	.+2      	; 0x107c <keyPad_dispatcher+0x50>
    107a:	bc c0       	rjmp	.+376    	; 0x11f4 <keyPad_dispatcher+0x1c8>
	* it's usage to know which key has been pressed
	* it called when it found one or more input pin low 
	* check which pin caused low by making one shifting colom low
	*/
    uint8 i,j;	
    uint8 key_ret_val = '\0';
    107c:	21 2c       	mov	r2, r1
	volatile uint8 i;
	BunchPins_Write(ptr->arr_KeyPadOutputPins,COLUMS,SET_VALUE_LOW); // clear output pins
	BunchPins_Write(ptr->arr_KeyPadInputPins,ROWS,SET_VALUE_HIGH); // set intput pins 
	for(i=0;i<ROWS;i++)
	{
		if (!(digitalRead(ptr->arr_KeyPadInputPins[i])))
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	f5 01       	movw	r30, r10
    1082:	e8 0f       	add	r30, r24
    1084:	f1 1d       	adc	r31, r1
    1086:	80 81       	ld	r24, Z
    1088:	0e 94 13 04 	call	0x826	; 0x826 <digitalRead>
    108c:	81 11       	cpse	r24, r1
    108e:	81 c0       	rjmp	.+258    	; 0x1192 <keyPad_dispatcher+0x166>
		{
			ptr_CallBackFun(get_key(ptr));	//call back fun
    1090:	60 90 b3 06 	lds	r6, 0x06B3	; 0x8006b3 <ptr_CallBackFun>
    1094:	70 90 b4 06 	lds	r7, 0x06B4	; 0x8006b4 <ptr_CallBackFun+0x1>
    1098:	45 01       	movw	r8, r10
    109a:	94 e0       	ldi	r25, 0x04	; 4
    109c:	89 0e       	add	r8, r25
    109e:	91 1c       	adc	r9, r1
	* it's usage to know which key has been pressed
	* it called when it found one or more input pin low 
	* check which pin caused low by making one shifting colom low
	*/
    uint8 i,j;	
    uint8 key_ret_val = '\0';
    10a0:	32 2c       	mov	r3, r2
		
	for (i = 0; i < COLUMS; i++)
    10a2:	41 2c       	mov	r4, r1
	{
		BunchPins_Write(ptr->arr_KeyPadOutputPins,COLUMS,SET_VALUE_HIGH); // set all coloums high
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	63 e0       	ldi	r22, 0x03	; 3
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	0e 94 4a 04 	call	0x894	; 0x894 <BunchPins_Write>
		// to stand out the pressed key i need to make all the other out to be high and one only low
		digitalWrite(ptr->arr_KeyPadOutputPins[i],SET_VALUE_LOW);  // clear a single coloum
    10b0:	62 2d       	mov	r22, r2
    10b2:	f4 01       	movw	r30, r8
    10b4:	81 91       	ld	r24, Z+
    10b6:	4f 01       	movw	r8, r30
    10b8:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
    10bc:	65 01       	movw	r12, r10
    10be:	e1 2c       	mov	r14, r1
    10c0:	f1 2c       	mov	r15, r1
    10c2:	5e 2c       	mov	r5, r14
    10c4:	ff ef       	ldi	r31, 0xFF	; 255
    10c6:	ef 1a       	sub	r14, r31
    10c8:	ff 0a       	sbc	r15, r31
		for (j = 0; j < ROWS ; j++)
		{
			if (!(digitalRead(ptr->arr_KeyPadInputPins[j])))           // check if single input pin low 
    10ca:	f6 01       	movw	r30, r12
    10cc:	81 91       	ld	r24, Z+
    10ce:	6f 01       	movw	r12, r30
    10d0:	0e 94 13 04 	call	0x826	; 0x826 <digitalRead>
    10d4:	81 11       	cpse	r24, r1
    10d6:	4d c0       	rjmp	.+154    	; 0x1172 <keyPad_dispatcher+0x146>
			{
				while (!(digitalRead(ptr->arr_KeyPadInputPins[j])));	// stay here while is pressed "low"
    10d8:	86 01       	movw	r16, r12
    10da:	01 50       	subi	r16, 0x01	; 1
    10dc:	11 09       	sbc	r17, r1
    10de:	f8 01       	movw	r30, r16
    10e0:	80 81       	ld	r24, Z
    10e2:	0e 94 13 04 	call	0x826	; 0x826 <digitalRead>
    10e6:	88 23       	and	r24, r24
    10e8:	d1 f3       	breq	.-12     	; 0x10de <keyPad_dispatcher+0xb2>
				switch (j) 
    10ea:	f1 e0       	ldi	r31, 0x01	; 1
    10ec:	5f 16       	cp	r5, r31
    10ee:	c1 f0       	breq	.+48     	; 0x1120 <keyPad_dispatcher+0xf4>
    10f0:	5f 16       	cp	r5, r31
    10f2:	38 f0       	brcs	.+14     	; 0x1102 <keyPad_dispatcher+0xd6>
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	58 16       	cp	r5, r24
    10f8:	11 f1       	breq	.+68     	; 0x113e <keyPad_dispatcher+0x112>
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	59 16       	cp	r5, r25
    10fe:	71 f1       	breq	.+92     	; 0x115c <keyPad_dispatcher+0x130>
    1100:	38 c0       	rjmp	.+112    	; 0x1172 <keyPad_dispatcher+0x146>
				{
					case (0):
					{
						if		(i == 0) key_ret_val = P_0_0; // j=0 , i=0
    1102:	44 20       	and	r4, r4
    1104:	09 f4       	brne	.+2      	; 0x1108 <keyPad_dispatcher+0xdc>
    1106:	4d c0       	rjmp	.+154    	; 0x11a2 <keyPad_dispatcher+0x176>
						else if (i == 1) key_ret_val = P_0_1; // j=0 , i=1
    1108:	e1 e0       	ldi	r30, 0x01	; 1
    110a:	4e 16       	cp	r4, r30
    110c:	09 f4       	brne	.+2      	; 0x1110 <keyPad_dispatcher+0xe4>
    110e:	4e c0       	rjmp	.+156    	; 0x11ac <keyPad_dispatcher+0x180>
#ifdef _COLUM_3
						else if (i == 2) key_ret_val = P_0_2; // j=0 , i=2
    1110:	f2 e0       	ldi	r31, 0x02	; 2
    1112:	4f 12       	cpse	r4, r31
    1114:	d6 cf       	rjmp	.-84     	; 0x10c2 <keyPad_dispatcher+0x96>
    1116:	0f 2e       	mov	r0, r31
    1118:	f3 e3       	ldi	r31, 0x33	; 51
    111a:	3f 2e       	mov	r3, r31
    111c:	f0 2d       	mov	r31, r0
    111e:	d1 cf       	rjmp	.-94     	; 0x10c2 <keyPad_dispatcher+0x96>
						}
						break;
					}
					case (1):
					{
						if		(i == 0) key_ret_val = P_1_0; // j=1 , i=0
    1120:	44 20       	and	r4, r4
    1122:	09 f4       	brne	.+2      	; 0x1126 <keyPad_dispatcher+0xfa>
    1124:	48 c0       	rjmp	.+144    	; 0x11b6 <keyPad_dispatcher+0x18a>
						else if (i == 1) key_ret_val = P_1_1; // j=1 , i=1
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	48 16       	cp	r4, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <keyPad_dispatcher+0x102>
    112c:	49 c0       	rjmp	.+146    	; 0x11c0 <keyPad_dispatcher+0x194>
#ifdef _COLUM_3
						else if (i == 2) key_ret_val = P_1_2; // j=1 , i=2
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	49 12       	cpse	r4, r25
    1132:	c7 cf       	rjmp	.-114    	; 0x10c2 <keyPad_dispatcher+0x96>
    1134:	0f 2e       	mov	r0, r31
    1136:	f6 e3       	ldi	r31, 0x36	; 54
    1138:	3f 2e       	mov	r3, r31
    113a:	f0 2d       	mov	r31, r0
    113c:	c2 cf       	rjmp	.-124    	; 0x10c2 <keyPad_dispatcher+0x96>
						break;
					}
#ifdef _ROW_3_
					case (2):
					{
						if		(i == 0) key_ret_val = P_2_0; // j=2 , i=0
    113e:	44 20       	and	r4, r4
    1140:	09 f4       	brne	.+2      	; 0x1144 <keyPad_dispatcher+0x118>
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <keyPad_dispatcher+0x19e>
						else if (i == 1) key_ret_val = P_2_1; // j=2 , i=1
    1144:	e1 e0       	ldi	r30, 0x01	; 1
    1146:	4e 16       	cp	r4, r30
    1148:	09 f4       	brne	.+2      	; 0x114c <keyPad_dispatcher+0x120>
    114a:	44 c0       	rjmp	.+136    	; 0x11d4 <keyPad_dispatcher+0x1a8>
#ifdef _COLUM_3
						else if (i == 2) key_ret_val = P_2_2; // j=2 , i=2
    114c:	f2 e0       	ldi	r31, 0x02	; 2
    114e:	4f 12       	cpse	r4, r31
    1150:	b8 cf       	rjmp	.-144    	; 0x10c2 <keyPad_dispatcher+0x96>
    1152:	0f 2e       	mov	r0, r31
    1154:	f9 e3       	ldi	r31, 0x39	; 57
    1156:	3f 2e       	mov	r3, r31
    1158:	f0 2d       	mov	r31, r0
    115a:	b3 cf       	rjmp	.-154    	; 0x10c2 <keyPad_dispatcher+0x96>
#endif // _ROW_3_

#ifdef _ROW_4_
					case (3):
					{
						if		(i == 0) key_ret_val = P_3_0; // j=3 , i=0
    115c:	44 20       	and	r4, r4
    115e:	09 f4       	brne	.+2      	; 0x1162 <keyPad_dispatcher+0x136>
    1160:	3e c0       	rjmp	.+124    	; 0x11de <keyPad_dispatcher+0x1b2>
						else if (i == 1) key_ret_val = P_3_1; // j=3 , i=1
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	48 16       	cp	r4, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <keyPad_dispatcher+0x13e>
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <keyPad_dispatcher+0x1bc>
#ifdef _COLUM_3
						else if (i == 2) key_ret_val = P_3_2; // j=3 , i=2
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	49 12       	cpse	r4, r25
    116e:	05 c0       	rjmp	.+10     	; 0x117a <keyPad_dispatcher+0x14e>
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <keyPad_dispatcher+0x158>
	for (i = 0; i < COLUMS; i++)
	{
		BunchPins_Write(ptr->arr_KeyPadOutputPins,COLUMS,SET_VALUE_HIGH); // set all coloums high
		// to stand out the pressed key i need to make all the other out to be high and one only low
		digitalWrite(ptr->arr_KeyPadOutputPins[i],SET_VALUE_LOW);  // clear a single coloum
		for (j = 0; j < ROWS ; j++)
    1172:	e3 e0       	ldi	r30, 0x03	; 3
    1174:	ee 15       	cp	r30, r14
    1176:	08 f0       	brcs	.+2      	; 0x117a <keyPad_dispatcher+0x14e>
    1178:	a4 cf       	rjmp	.-184    	; 0x10c2 <keyPad_dispatcher+0x96>
	* check which pin caused low by making one shifting colom low
	*/
    uint8 i,j;	
    uint8 key_ret_val = '\0';
		
	for (i = 0; i < COLUMS; i++)
    117a:	43 94       	inc	r4
    117c:	f3 e0       	ldi	r31, 0x03	; 3
    117e:	4f 12       	cpse	r4, r31
    1180:	91 cf       	rjmp	.-222    	; 0x10a4 <keyPad_dispatcher+0x78>
    1182:	04 c0       	rjmp	.+8      	; 0x118c <keyPad_dispatcher+0x160>
					case (3):
					{
						if		(i == 0) key_ret_val = P_3_0; // j=3 , i=0
						else if (i == 1) key_ret_val = P_3_1; // j=3 , i=1
#ifdef _COLUM_3
						else if (i == 2) key_ret_val = P_3_2; // j=3 , i=2
    1184:	0f 2e       	mov	r0, r31
    1186:	f3 e2       	ldi	r31, 0x23	; 35
    1188:	3f 2e       	mov	r3, r31
    118a:	f0 2d       	mov	r31, r0
	BunchPins_Write(ptr->arr_KeyPadInputPins,ROWS,SET_VALUE_HIGH); // set intput pins 
	for(i=0;i<ROWS;i++)
	{
		if (!(digitalRead(ptr->arr_KeyPadInputPins[i])))
		{
			ptr_CallBackFun(get_key(ptr));	//call back fun
    118c:	83 2d       	mov	r24, r3
    118e:	f3 01       	movw	r30, r6
    1190:	09 95       	icall
void keyPad_dispatcher(KeyPad_PinCnfg_t* ptr)
{
	volatile uint8 i;
	BunchPins_Write(ptr->arr_KeyPadOutputPins,COLUMS,SET_VALUE_LOW); // clear output pins
	BunchPins_Write(ptr->arr_KeyPadInputPins,ROWS,SET_VALUE_HIGH); // set intput pins 
	for(i=0;i<ROWS;i++)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <keyPad_dispatcher+0x174>
    119e:	6f cf       	rjmp	.-290    	; 0x107e <keyPad_dispatcher+0x52>
    11a0:	29 c0       	rjmp	.+82     	; 0x11f4 <keyPad_dispatcher+0x1c8>
				while (!(digitalRead(ptr->arr_KeyPadInputPins[j])));	// stay here while is pressed "low"
				switch (j) 
				{
					case (0):
					{
						if		(i == 0) key_ret_val = P_0_0; // j=0 , i=0
    11a2:	0f 2e       	mov	r0, r31
    11a4:	f1 e3       	ldi	r31, 0x31	; 49
    11a6:	3f 2e       	mov	r3, r31
    11a8:	f0 2d       	mov	r31, r0
    11aa:	8b cf       	rjmp	.-234    	; 0x10c2 <keyPad_dispatcher+0x96>
						else if (i == 1) key_ret_val = P_0_1; // j=0 , i=1
    11ac:	0f 2e       	mov	r0, r31
    11ae:	f2 e3       	ldi	r31, 0x32	; 50
    11b0:	3f 2e       	mov	r3, r31
    11b2:	f0 2d       	mov	r31, r0
    11b4:	86 cf       	rjmp	.-244    	; 0x10c2 <keyPad_dispatcher+0x96>
						}
						break;
					}
					case (1):
					{
						if		(i == 0) key_ret_val = P_1_0; // j=1 , i=0
    11b6:	0f 2e       	mov	r0, r31
    11b8:	f4 e3       	ldi	r31, 0x34	; 52
    11ba:	3f 2e       	mov	r3, r31
    11bc:	f0 2d       	mov	r31, r0
    11be:	81 cf       	rjmp	.-254    	; 0x10c2 <keyPad_dispatcher+0x96>
						else if (i == 1) key_ret_val = P_1_1; // j=1 , i=1
    11c0:	0f 2e       	mov	r0, r31
    11c2:	f5 e3       	ldi	r31, 0x35	; 53
    11c4:	3f 2e       	mov	r3, r31
    11c6:	f0 2d       	mov	r31, r0
    11c8:	7c cf       	rjmp	.-264    	; 0x10c2 <keyPad_dispatcher+0x96>
						break;
					}
#ifdef _ROW_3_
					case (2):
					{
						if		(i == 0) key_ret_val = P_2_0; // j=2 , i=0
    11ca:	0f 2e       	mov	r0, r31
    11cc:	f7 e3       	ldi	r31, 0x37	; 55
    11ce:	3f 2e       	mov	r3, r31
    11d0:	f0 2d       	mov	r31, r0
    11d2:	77 cf       	rjmp	.-274    	; 0x10c2 <keyPad_dispatcher+0x96>
						else if (i == 1) key_ret_val = P_2_1; // j=2 , i=1
    11d4:	0f 2e       	mov	r0, r31
    11d6:	f8 e3       	ldi	r31, 0x38	; 56
    11d8:	3f 2e       	mov	r3, r31
    11da:	f0 2d       	mov	r31, r0
    11dc:	72 cf       	rjmp	.-284    	; 0x10c2 <keyPad_dispatcher+0x96>
#endif // _ROW_3_

#ifdef _ROW_4_
					case (3):
					{
						if		(i == 0) key_ret_val = P_3_0; // j=3 , i=0
    11de:	0f 2e       	mov	r0, r31
    11e0:	fa e2       	ldi	r31, 0x2A	; 42
    11e2:	3f 2e       	mov	r3, r31
    11e4:	f0 2d       	mov	r31, r0
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <keyPad_dispatcher+0x1c4>
						else if (i == 1) key_ret_val = P_3_1; // j=3 , i=1
    11e8:	0f 2e       	mov	r0, r31
    11ea:	f0 e3       	ldi	r31, 0x30	; 48
    11ec:	3f 2e       	mov	r3, r31
    11ee:	f0 2d       	mov	r31, r0
	* check which pin caused low by making one shifting colom low
	*/
    uint8 i,j;	
    uint8 key_ret_val = '\0';
		
	for (i = 0; i < COLUMS; i++)
    11f0:	43 94       	inc	r4
    11f2:	58 cf       	rjmp	.-336    	; 0x10a4 <keyPad_dispatcher+0x78>
		{
			ptr_CallBackFun(get_key(ptr));	//call back fun
			// when come back again it should be breaked;
		}
	}
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	9f 90       	pop	r9
    1210:	8f 90       	pop	r8
    1212:	7f 90       	pop	r7
    1214:	6f 90       	pop	r6
    1216:	5f 90       	pop	r5
    1218:	4f 90       	pop	r4
    121a:	3f 90       	pop	r3
    121c:	2f 90       	pop	r2
    121e:	08 95       	ret

00001220 <Change_CallBackfunction>:

void Change_CallBackfunction(void (*ptr_Fu)(uint8 ))
{
	ptr_CallBackFun=ptr_Fu;
    1220:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <ptr_CallBackFun+0x1>
    1224:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <ptr_CallBackFun>
    1228:	08 95       	ret

0000122a <kick>:

#define EN        ptr->Enable_pin
#define RS        ptr->Reg_Select

static void kick(const struct_PinsCnfg_t* ptr,uint8 chr)
{
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	6c 01       	movw	r12, r24
    123c:	8c 01       	movw	r16, r24
    123e:	c0 e0       	ldi	r28, 0x00	; 0
    1240:	d0 e0       	ldi	r29, 0x00	; 0
	* make pulse to make lcd work
	*/
	uint8 i;
	for (i=0;i<DATA_PINS;i++)
	{
		if (chr & (1<<i))
    1242:	e6 2e       	mov	r14, r22
    1244:	f1 2c       	mov	r15, r1
    1246:	c7 01       	movw	r24, r14
    1248:	0c 2e       	mov	r0, r28
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <kick+0x26>
    124c:	95 95       	asr	r25
    124e:	87 95       	ror	r24
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <kick+0x22>
    1254:	80 ff       	sbrs	r24, 0
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <kick+0x3a>
		{
			digitalWrite(ptr->arr_DataPins[i],SET_VALUE_HIGH);
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	f8 01       	movw	r30, r16
    125c:	80 81       	ld	r24, Z
    125e:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
    1262:	05 c0       	rjmp	.+10     	; 0x126e <kick+0x44>
		}
		else
		{
			digitalWrite(ptr->arr_DataPins[i],SET_VALUE_LOW);
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	f8 01       	movw	r30, r16
    1268:	80 81       	ld	r24, Z
    126a:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
    126e:	21 96       	adiw	r28, 0x01	; 1
    1270:	0f 5f       	subi	r16, 0xFF	; 255
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
	/*
	* assign data in the pins of the confg
	* make pulse to make lcd work
	*/
	uint8 i;
	for (i=0;i<DATA_PINS;i++)
    1274:	c4 30       	cpi	r28, 0x04	; 4
    1276:	d1 05       	cpc	r29, r1
    1278:	31 f7       	brne	.-52     	; 0x1246 <kick+0x1c>
		{
			digitalWrite(ptr->arr_DataPins[i],SET_VALUE_LOW);
		}
	}
	
	digitalWrite(EN,SET_VALUE_LOW);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	f6 01       	movw	r30, r12
    127e:	84 81       	ldd	r24, Z+4	; 0x04
    1280:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
    1284:	89 ef       	ldi	r24, 0xF9	; 249
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <kick+0x5e>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <kick+0x64>
    128e:	00 00       	nop
	_delay_ms(1);
	digitalWrite(EN,SET_VALUE_HIGH);
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	f6 01       	movw	r30, r12
    1294:	84 81       	ldd	r24, Z+4	; 0x04
    1296:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	08 95       	ret

000012ac <lcd_cmd>:
	lcd_cmd(ptr,CURSOR_OFF);
	lcd_clear(ptr);
}

void lcd_cmd(const struct_PinsCnfg_t* ptr,uint8 cmd)
{
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	16 2f       	mov	r17, r22
	/*
	* select the register "command || data " in this case command
	* sent the command
	*/
	digitalWrite(RS,SET_VALUE_LOW);    // register select command
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
	#ifdef _8BIT_MODE
	kick(ptr,cmd);
	#endif

	#ifdef _4BIT_MODE
	kick(ptr,cmd>>4);
    12be:	61 2f       	mov	r22, r17
    12c0:	62 95       	swap	r22
    12c2:	6f 70       	andi	r22, 0x0F	; 15
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 15 09 	call	0x122a	; 0x122a <kick>
	kick(ptr,(cmd));
    12ca:	61 2f       	mov	r22, r17
    12cc:	ce 01       	movw	r24, r28
    12ce:	0e 94 15 09 	call	0x122a	; 0x122a <kick>
    12d2:	83 ef       	ldi	r24, 0xF3	; 243
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <lcd_cmd+0x2a>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <lcd_cmd+0x30>
    12dc:	00 00       	nop
	#endif
	_delay_ms(2);
}
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	08 95       	ret

000012e6 <lcd_chr>:

void lcd_chr(const struct_PinsCnfg_t* ptr,uint8 chr)
{
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
    12ee:	16 2f       	mov	r17, r22
	/*
	* select the register "command || data " in this case data
	* sent the data
	*/
	digitalWrite(RS,SET_VALUE_HIGH);              // register select data
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	0e 94 92 03 	call	0x724	; 0x724 <digitalWrite>
	#ifdef _8BIT_MODE
	kick(ptr,chr);
	#endif

	#ifdef _4BIT_MODE
	kick(ptr,chr>>4);
    12f8:	61 2f       	mov	r22, r17
    12fa:	62 95       	swap	r22
    12fc:	6f 70       	andi	r22, 0x0F	; 15
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 15 09 	call	0x122a	; 0x122a <kick>
	kick(ptr,(chr));
    1304:	61 2f       	mov	r22, r17
    1306:	ce 01       	movw	r24, r28
    1308:	0e 94 15 09 	call	0x122a	; 0x122a <kick>
    130c:	89 ef       	ldi	r24, 0xF9	; 249
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <lcd_chr+0x2a>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <lcd_chr+0x30>
    1316:	00 00       	nop
	#endif
	_delay_ms(1);
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	08 95       	ret

00001320 <lcd_clear>:

void lcd_clear(const struct_PinsCnfg_t* ptr)
{
	lcd_cmd(ptr,CLEAR_SCREEN); // do the same as a command
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
    1326:	08 95       	ret

00001328 <lcd_goto>:
}

void lcd_goto(const struct_PinsCnfg_t* ptr,uint8 row, uint8 col)
{
	if (row == 0)
    1328:	61 11       	cpse	r22, r1
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <lcd_goto+0xe>
	{
		lcd_cmd(ptr,(unsigned) 0x80 | col);
    132c:	64 2f       	mov	r22, r20
    132e:	60 68       	ori	r22, 0x80	; 128
    1330:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
    1334:	08 95       	ret
	}
	else if (row == 1)
    1336:	61 30       	cpi	r22, 0x01	; 1
    1338:	29 f4       	brne	.+10     	; 0x1344 <lcd_goto+0x1c>
	{
		lcd_cmd(ptr,(unsigned) 0xc0 | col);
    133a:	64 2f       	mov	r22, r20
    133c:	60 6c       	ori	r22, 0xC0	; 192
    133e:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
    1342:	08 95       	ret
	}
	#ifdef _LCD_16_4_
	else if (row==2)
    1344:	62 30       	cpi	r22, 0x02	; 2
    1346:	29 f4       	brne	.+10     	; 0x1352 <lcd_goto+0x2a>
	{
		lcd_cmd(ptr,(unsigned) 0x90  | col);
    1348:	64 2f       	mov	r22, r20
    134a:	60 69       	ori	r22, 0x90	; 144
    134c:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
    1350:	08 95       	ret
	}
	else if (row==3)
    1352:	63 30       	cpi	r22, 0x03	; 3
    1354:	21 f4       	brne	.+8      	; 0x135e <lcd_goto+0x36>
	{
		lcd_cmd(ptr,(unsigned) 0xD0 | col);
    1356:	64 2f       	mov	r22, r20
    1358:	60 6d       	ori	r22, 0xD0	; 208
    135a:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
    135e:	08 95       	ret

00001360 <lcd_init>:
	_delay_ms(1);
	digitalWrite(EN,SET_VALUE_HIGH);
}

void lcd_init(const struct_PinsCnfg_t* ptr)
{
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	8c 01       	movw	r16, r24
    136e:	ec 01       	movw	r28, r24
    1370:	7c 01       	movw	r14, r24
    1372:	84 e0       	ldi	r24, 0x04	; 4
    1374:	e8 0e       	add	r14, r24
    1376:	f1 1c       	adc	r15, r1
	* config the lcd to start working
	*/
	uint8 i;
	for(i=0;i<DATA_PINS;i++)
	{
		SetPinDirection(ptr->arr_DataPins[i],SET_PIN_OUT);
    1378:	61 e0       	ldi	r22, 0x01	; 1
    137a:	89 91       	ld	r24, Y+
    137c:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	/*
	* set dirction output for data and control pins
	* config the lcd to start working
	*/
	uint8 i;
	for(i=0;i<DATA_PINS;i++)
    1380:	ce 15       	cp	r28, r14
    1382:	df 05       	cpc	r29, r15
    1384:	c9 f7       	brne	.-14     	; 0x1378 <lcd_init+0x18>
	{
		SetPinDirection(ptr->arr_DataPins[i],SET_PIN_OUT);
	}
	SetPinDirection(RS,SET_PIN_OUT);
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	f8 01       	movw	r30, r16
    138a:	85 81       	ldd	r24, Z+5	; 0x05
    138c:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	SetPinDirection(EN,SET_PIN_OUT);
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	f8 01       	movw	r30, r16
    1394:	84 81       	ldd	r24, Z+4	; 0x04
    1396:	0e 94 11 03 	call	0x622	; 0x622 <SetPinDirection>
	
	#ifdef _4BIT_MODE
	lcd_cmd(ptr,0x02);						//config lcd mode send commands to
    139a:	62 e0       	ldi	r22, 0x02	; 2
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
	lcd_cmd(ptr,BIT_4);
    13a2:	68 e2       	ldi	r22, 0x28	; 40
    13a4:	c8 01       	movw	r24, r16
    13a6:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
	
	#ifdef _8BIT_MODE
	lcd_cmd(ptr,BIT_8);
	#endif
	
	lcd_cmd(ptr,ENTRY_MODE);                          // init lcd to use
    13aa:	66 e0       	ldi	r22, 0x06	; 6
    13ac:	c8 01       	movw	r24, r16
    13ae:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
	lcd_goto(ptr,0, 0);
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	c8 01       	movw	r24, r16
    13b8:	0e 94 94 09 	call	0x1328	; 0x1328 <lcd_goto>
	lcd_cmd(ptr,CURSOR_OFF);
    13bc:	6c e0       	ldi	r22, 0x0C	; 12
    13be:	c8 01       	movw	r24, r16
    13c0:	0e 94 56 09 	call	0x12ac	; 0x12ac <lcd_cmd>
	lcd_clear(ptr);
    13c4:	c8 01       	movw	r24, r16
    13c6:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	08 95       	ret

000013d8 <lcd_str>:
		// should never be here
	}
}

void lcd_str(const struct_PinsCnfg_t* ptr_lcd,uint8 row, uint8 col,uint8* ptr_chr)
{
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	8c 01       	movw	r16, r24
    13e8:	f6 2e       	mov	r15, r22
    13ea:	d2 2e       	mov	r13, r18
    13ec:	e3 2e       	mov	r14, r19
	lcd_goto(ptr_lcd,row,col);
    13ee:	0e 94 94 09 	call	0x1328	; 0x1328 <lcd_goto>
    13f2:	cd 2d       	mov	r28, r13
    13f4:	de 2d       	mov	r29, r14
	while (*ptr_chr != '\0')
    13f6:	0c c0       	rjmp	.+24     	; 0x1410 <lcd_str+0x38>
	{
		if (*ptr_chr == '*') // so i can't put * inside string to be shown in lcd
    13f8:	6a 32       	cpi	r22, 0x2A	; 42
    13fa:	39 f4       	brne	.+14     	; 0x140a <lcd_str+0x32>
		{
			lcd_goto(ptr_lcd,++row,0);
    13fc:	f3 94       	inc	r15
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	6f 2d       	mov	r22, r15
    1402:	c8 01       	movw	r24, r16
    1404:	0e 94 94 09 	call	0x1328	; 0x1328 <lcd_goto>
			ptr_chr++;
			continue; // SKIP priniting '*'
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <lcd_str+0x38>
		}
		lcd_chr(ptr_lcd,*ptr_chr);
    140a:	c8 01       	movw	r24, r16
    140c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <lcd_chr>
}

void lcd_str(const struct_PinsCnfg_t* ptr_lcd,uint8 row, uint8 col,uint8* ptr_chr)
{
	lcd_goto(ptr_lcd,row,col);
	while (*ptr_chr != '\0')
    1410:	69 91       	ld	r22, Y+
    1412:	61 11       	cpse	r22, r1
    1414:	f1 cf       	rjmp	.-30     	; 0x13f8 <lcd_str+0x20>
			continue; // SKIP priniting '*'
		}
		lcd_chr(ptr_lcd,*ptr_chr);
		ptr_chr++;
	}
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	08 95       	ret

00001426 <Get_option>:
bool_t Remote_ControlSemphore=0; // to make live control work
bool_t CommRX_DisspatcherSemphore=0;// to make commrxwork

void Get_option(uint8 num)
{
	Keypad_semphore = 0; // to make it free to use from other modules
    1426:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <Keypad_semphore>
	switch(num)
    142a:	83 33       	cpi	r24, 0x33	; 51
    142c:	39 f0       	breq	.+14     	; 0x143c <Get_option+0x16>
    142e:	84 33       	cpi	r24, 0x34	; 52
    1430:	41 f0       	breq	.+16     	; 0x1442 <Get_option+0x1c>
    1432:	81 33       	cpi	r24, 0x31	; 49
    1434:	41 f4       	brne	.+16     	; 0x1446 <Get_option+0x20>
	{
		case '1' :
		{   //authentication
			System_LogIn();
    1436:	0e 94 ba 02 	call	0x574	; 0x574 <System_LogIn>
			break;
    143a:	08 95       	ret
		{	// bootloadr
			break;
		}
		case '3' :
		{	//remot control
			Remot_controlMode();
    143c:	0e 94 35 06 	call	0xc6a	; 0xc6a <Remot_controlMode>
			break;
    1440:	08 95       	ret
		}
		case '4' :
		{	// change passwor "authentication"
			Change_password();
    1442:	0e 94 42 01 	call	0x284	; 0x284 <Change_password>
    1446:	08 95       	ret

00001448 <system_init>:
	}
}

void system_init()
{
	kpad_init(&mykeypad,Get_option);
    1448:	63 e1       	ldi	r22, 0x13	; 19
    144a:	7a e0       	ldi	r23, 0x0A	; 10
    144c:	86 e6       	ldi	r24, 0x66	; 102
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 f5 07 	call	0xfea	; 0xfea <kpad_init>
	lcd_init(&mylcd);
    1454:	8d e6       	ldi	r24, 0x6D	; 109
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 b0 09 	call	0x1360	; 0x1360 <lcd_init>
	gpio_spi_cng_master();
    145c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <gpio_spi_cng_master>
	gpio_uart_cng();
    1460:	0e 94 67 04 	call	0x8ce	; 0x8ce <gpio_uart_cng>
    1464:	08 95       	ret

00001466 <system_options>:
	*/
}

void system_options()
{
	lcd_clear(&mylcd);
    1466:	8d e6       	ldi	r24, 0x6D	; 109
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 90 09 	call	0x1320	; 0x1320 <lcd_clear>
	lcd_str(&mylcd,0,0,"1-Enter system*2-Update system*3-Remote control*4-settings"); // authentication
    146e:	27 e4       	ldi	r18, 0x47	; 71
    1470:	32 e0       	ldi	r19, 0x02	; 2
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	8d e6       	ldi	r24, 0x6D	; 109
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <lcd_str>
	Change_CallBackfunction(Get_option); // change call back funcation
    147e:	83 e1       	ldi	r24, 0x13	; 19
    1480:	9a e0       	ldi	r25, 0x0A	; 10
    1482:	0e 94 10 09 	call	0x1220	; 0x1220 <Change_CallBackfunction>
	Keypad_semphore = 1;  // run the Keypad for get option
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <Keypad_semphore>
    148c:	08 95       	ret

0000148e <main>:
}

int main(void)
{
	system_init();
    148e:	0e 94 24 0a 	call	0x1448	; 0x1448 <system_init>
	system_options();
    1492:	0e 94 33 0a 	call	0x1466	; 0x1466 <system_options>
	sei(); // open global interrupt for timer
    1496:	78 94       	sei
	while (1)
	{
		if (Keypad_semphore)
    1498:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <Keypad_semphore>
    149c:	88 23       	and	r24, r24
    149e:	21 f0       	breq	.+8      	; 0x14a8 <main+0x1a>
		{
			keyPad_dispatcher(&mykeypad);
    14a0:	86 e6       	ldi	r24, 0x66	; 102
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 16 08 	call	0x102c	; 0x102c <keyPad_dispatcher>
		}
		if (SYSTEM_OPTIONS_flag)
    14a8:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <SYSTEM_OPTIONS_flag>
    14ac:	88 23       	and	r24, r24
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <main+0x2a>
		{
			SYSTEM_OPTIONS_flag=0;
    14b0:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <SYSTEM_OPTIONS_flag>
			system_options();
    14b4:	0e 94 33 0a 	call	0x1466	; 0x1466 <system_options>
		}
		if (TMU_semphore)
    14b8:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <TMU_semphore>
    14bc:	81 11       	cpse	r24, r1
		{
			TMU_Dispatcher();
    14be:	0e 94 b1 07 	call	0xf62	; 0xf62 <TMU_Dispatcher>
		}
		if (authentication_DispatcherSemphore)
    14c2:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <authentication_DispatcherSemphore>
    14c6:	81 11       	cpse	r24, r1
		{
			Authentication_Dispatcher();
    14c8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Authentication_Dispatcher>
		}
		if (Remote_ControlSemphore)
    14cc:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <Remote_ControlSemphore>
    14d0:	81 11       	cpse	r24, r1
		{
			Remot_controlDisspatcher();
    14d2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Remot_controlDisspatcher>
		}
		if (CommRX_DisspatcherSemphore)
    14d6:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <CommRX_DisspatcherSemphore>
    14da:	88 23       	and	r24, r24
    14dc:	e9 f2       	breq	.-70     	; 0x1498 <main+0xa>
		{
			RX_com_dispatch();
    14de:	0e 94 13 05 	call	0xa26	; 0xa26 <RX_com_dispatch>
    14e2:	da cf       	rjmp	.-76     	; 0x1498 <main+0xa>

000014e4 <_exit>:
    14e4:	f8 94       	cli

000014e6 <__stop_program>:
    14e6:	ff cf       	rjmp	.-2      	; 0x14e6 <__stop_program>
